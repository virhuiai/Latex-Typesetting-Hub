% \subsection{Preliminary\\预备知识}
% \label{sec:basic:preliminary}
%
^^A % \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{Since \pkg{minted} makes calls to the outside world (that is, \app{Pygments}), you need to tell the
\LaTeX{} processor about this by passing it the |-shell-escape| option or it won't allow such calls.
In effect, instead of calling the processor like this:}
% \par{由于\pkg{minted}需要调用外部工具（即\app{Pygments}），你需要使用|-shell-escape|选项告诉\LaTeX 排版引擎。否则它不会允许这样的调用。实际上，不要像这样调用排版引擎：}
^^A 由于 \pkg{minted} 会调用外部应用（即 \app{Pygments}），你需要告诉
^^A \LaTeX{}排版引擎，将 |-shell-escape| 选项传递给它，否则它就不允许这样的调用。
^^A 实际上，不要像这样：
^^A % \end{parcolumns}
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ latex input
% \end{Verbatim}
%
^^A % \addvspace{\parskip}
% \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \colchunk{you need to call it like this:}
% \colchunk{你需要像这样调用它：}
% \end{parcolumns}
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ latex -shell-escape input
% \end{Verbatim}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{The same holds for other processors, such as |pdflatex| or |xelatex|.}
% \par{对于其他排版引擎（例如|pdflatex|或|xelatex|）也是同样的情况。}
^^A 其他的排版引擎也是如此，如|pdflatex|或|xelatex|。
^^A % \end{parcolumns}

% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{You should be aware that using |-shell-escape| allows \LaTeX\ to run potentially arbitrary commands on your system.  It is probably best to use |-shell-escape| only when you need it, and to use it only with documents from trusted sources.}
% \par{你应该知道，使用|-shell-escape|允许\LaTeX 在你的系统上运行潜在的任意命令。最好仅在需要时使用|-shell-escape|，并且仅与来自可信源的文档一起使用。}
^^A 你应该知道，使用|-shell-escape|允许 \LaTeX\ 在你的系统上运行潜在的任意命令。最好是在需要时才使用|-shell-escape|，并且只对可信来源的文档使用。
^^A % \end{parcolumns}

%
%
% \subsubsection*{Working with OS X\\在 OS X 上使用}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{If you are using \pkg{minted} with some versions/configurations of OS X, and are using caching with a large number of code blocks ($>256$), you may receive an error like}
% \par{如果你在某些版本/配置的 OS X 上使用\pkg{minted}，并且使用具有大量代码块（$>256$）的缓存，你可能会收到以下错误：}
^^A 如果你在OS X的某些版本/配置下使用\pkg{minted}，并且在使用大量代码块的缓存时($>256$)，你可能会收到一个错误，如 
^^A % \end{parcolumns}
%\begin{Verbatim}
%OSError: [Errno 24] Too many open files:
%\end{Verbatim}
^^A % \addvspace{\parskip}


This is due to the way files are handled by the operating system, combined with the way that caching works.  To resolve this, you may use the OS X commands to increase the number of files that may be used:

这是由于操作系统处理文件的方式与缓存工作方式的结合引起的。为了解决这个问题，你可以使用 OS X 命令增加可使用的文件数量：

|launchctl limit maxfiles| or |ulimit -n| 


^^A 这是由于操作系统处理文件的方式，再加上缓存的工作方式。 为了解决这个问题，你可以使用OS X的命令|launchctl limit maxfiles|或|ulimit -n|来增加可使用的文件数量。
^^A % \end{parcolumns}
%
%
%
% \subsection{A minimal complete example\\一个最小的完整示例}
%
% \addvspace{\parskip}
% \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \colchunk{The following file |minimal.tex| shows the basic usage of \pkg{minted}.}
% \colchunk{下面的文件|minimal.tex|展示了\pkg{minted}的基本用法。}
^^A 下面的文件|minimal.tex|显示了 \pkg{minted}的基本用法。
% \end{parcolumns}
%
% \begin{VerbatimOut}[gobble=1]{minted.doc.out}
%   \documentclass{article}
%
%   \usepackage{minted}
%
%   \begin{document}
%   \begin{minted}{c}
%   int main() {
%       printf("hello, world");
%       return 0;
%   }
%   \end{minted}
%   \end{document}
% \end{VerbatimOut}
% \inputminted[gobble=2,frame=lines]{latex}{minted.doc.out}
%
^^A % \addvspace{\parskip}
% \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \colchunk{By compiling the source file like this:}
% \colchunk{通过这样编译源文件:}
% \end{parcolumns}
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ pdflatex -shell-escape minimal
% \end{Verbatim}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{we end up with the following output in |minimal.pdf|:}
% \par{运行上述命令后，会生成 |minimal.pdf| 文件，其中包含如下代码的输出：}
^^A % \end{parcolumns}
%
% \hfill
% \colorbox{minted@samplebg}{\begin{minipage}{0.6\textwidth}
%   \inputminted[firstline=7,lastline=10]{c}{minted.doc.out}
% \end{minipage}}
% \hfill\hfill
%
%
% \subsection{Formatting source code\\格式化源代码}
%
% \DescribeEnv{minted}
^^A % \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
%{Using \pkg{minted} is straightforward. For example, to highlight some Python source code we might use the following code snippet (result on the right):}
% \par{使用 \pkg{minted} 包很简单。例如，若要高亮显示一些 Python 代码，可以使用以下代码片段（右侧为输出结果）：}
^^A % \end{parcolumns}
%
% \begin{example}
%   \begin{minted}{python}
%   def boring(args = None):
%       pass
%   \end{minted}
% \end{example}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{Optionally, the environment accepts a number of options in |key=value| notation, which are described
% in more detail below.}
% \par{此外，该环境还接受一些以 |key=value| 形式的选项，详见下文。}
^^A 可选的是，环境接受一些以|key=value|符号表示的选项，这些选项将在下面详细描述。
^^A % \end{parcolumns}
%
%
% \DescribeMacro{\mint}
^^A % \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% {For a single line of source code, you can alternatively use a shorthand notation:}
^^A % \par{对于单行代码，也可以使用简写：}

对于单行源代码，您可以使用简写形式：
^^A % \end{parcolumns}
%
% \begin{example}
%   \mint{python}|import this|
% \end{example}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{% This typesets a single line of code using a command rather than an environment, so it saves a little typing, but its output is equivalent to that of the |minted| environment.}
% \par{% 这样可以使用命令而不是环境来排版一行代码，因此节省了一些打字量，但输出结果与 |minted| 环境的结果等效。}
^^A 这是用一个命令而不是环境来排版一行代码，所以它节省了一点打字量，但它的输出与|minted|环境的输出是相等的。 
^^A % \end{parcolumns}


The code is delimited by a pair of identical characters, similar to how  |\verb| works.  The complete syntax is 

^^A 代码由一对相同的字符进行定界，与 |\verb| 命令类似。完整语法为
代码由一对相同的字符分隔，类似于 |\verb| 的工作方式。完整的语法是

\cmd\mint\oarg{options}\marg{language}\meta{delim}\meta{code}\meta{delim}

% where the code delimiter can be almost any punctuation character.
% The \meta{code} may also be delimited with matched curly braces |{}|, so long as \meta{code} itself does not contain unmatched curly braces.
% Again, this command supports a number of options described below.

其中代码定界符可以是几乎任意标点符号。代码片段也可以用匹配的花括号 |{}| 进行定界，只要代码本身不包含未匹配的花括号。该命令也支持一些选项，详见下文。
^^A % \end{parcolumns}

%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{% Note that the |\mint| command \textbf{is not for inline use}.  Rather, it is a shortcut for |minted| when only a single line of code is present.  The |\mintinline| command is provided for inline use.}
% \par{% 注意，|\mint| 命令\textbf{不能用于行内排版}。相反，它是当仅有一行代码时使用 |minted| 的一种快捷方式。对于行内排版，应使用 |\mintinline| 命令。}
^^A % \end{parcolumns}
%
%
% \DescribeMacro{\mintinline}
^^A % \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% {% Code can be typeset inline:}
% \par{% 可以行内排版代码：}
^^A % \end{parcolumns}
% 
% \begin{example}
%   X\mintinline{python}{print(x**2)}X
% \end{example}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{The syntax is}
% \par{语法为}
^^A % \end{parcolumns}

\cmd\mintinline\oarg{options}\marg{language}\meta{delim}\meta{code}\meta{delim}

^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{The delimiters can be a pair of characters, as for \cmd\mint.  They can also be a matched pair of curly braces, |{}|.}
% \par{定界符可以是一对字符，如 \cmd\mint。它们也可以是匹配的花括号 |{}|。}
^^A % \end{parcolumns}
%
% \addvspace{\parskip}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{The command has been carefully crafted so that in most cases it will function correctly when used inside other commands.\footnote{For example, \mintinline{latex}{\mintinline} works in footnotes!  The main exception is when the code contains the percent \texttt{\%} or hash \texttt{\#} characters, or unmatched curly braces.}}
% \par{该命令被精心制作，以便在大多数情况下，在其他命令内使用时它会正确地工作。\footnote{例如，\mintinline{latex}{\mintinline}在脚注中也可以使用！主要例外是当代码包含百分号\texttt{\%}或井号\texttt{\#}字符，或未匹配的花括号时。}}
^^A % \end{parcolumns}
%
% \DescribeMacro{\inputminted}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% Finally, there's the |\inputminted| command to read and format whole files.
% Its syntax is 

最后，有|\inputminted|命令来读取和格式化整个文件。它的语法为

\cmd\inputminted\oarg{options}\marg{language}\marg{filename}

^^A % \end{parcolumns}
%
%
% \subsection{Using different styles\\使用不同的样式}
%
% \DescribeMacro{\usemintedstyle}
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% {Instead of using the default style you may choose another stylesheet provided by \app{Pygments}.  This may be done via the following:}
% \par{你可以选择由\app{Pygments}提供的另一个样式表，而不是使用默认样式表。这可以通过以下方式实现：}
^^A % \end{parcolumns}
%
% \mint[frame=lines]{latex}/\usemintedstyle{name}/
%
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% {The full syntax is \cmd\usemintedstyle\oarg{language}\marg{style}.  The style may be set for the document as a whole (no language specified), or only for a particular language.  Note that the style may also be set via \cmd\setminted\ and via the optional argument for each command and environment.\footnote{Version 2.0 added the optional language argument and removed the restriction that the command be used in the preamble.}}
% \par{完整的语法是\cmd\usemintedstyle\oarg{language}\marg{style}。可以为整个文档设置样式（未指定语言），或仅为特定语言设置样式。请注意，样式也可以通过\cmd\setminted和每个命令和环境的可选参数进行设置。\footnote{版本2.0添加了可选语言参数，并删除了必须在导言中使用该命令的限制。}}
^^A % \end{parcolumns}
%
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{To get a list of all available stylesheets, see the online demo at the \href{http://pygments.org/demo/}{Pygments website} or execute the following command on the command line:}
% \par{要获取所有可用样式表的列表，请参见\href{http://pygments.org/demo/}{Pygments网站}上的在线演示，或在命令行上执行以下命令：}
^^A % \end{parcolumns}
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ pygmentize -L styles
% \end{Verbatim}
%
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{Creating your own styles is also easy. Just follow the instructions provided on the
\href{http://pygments.org/docs/styles/#creating-own-styles}{\pkg{Pygments} website}.}
% \par{创建自己的样式也很容易。只需按照\href{http://pygments.org/docs/styles/#creating-own-styles}{\pkg{Pygments}网站}提供的说明即可。}
^^A % \end{parcolumns}
%
%
% \subsection{Supported languages\\支持的语言}
%
^^A % \begin{parcolumns}[rulebetween=true,colwidths={1=.6\linewidth}]{2}
% \par{\app{Pygments} supports over 300 different programming languages, template languages, and other markup languages.  To see an exhaustive list of the currently supported languages, use the command}
% \par{\app{Pygments}支持300多种不同的编程语言、模板语言和其他标记语言。要查看当前支持的语言的详细列表，请使用以下命令：}
^^A % \end{parcolumns}
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ pygmentize -L lexers
% \end{Verbatim}