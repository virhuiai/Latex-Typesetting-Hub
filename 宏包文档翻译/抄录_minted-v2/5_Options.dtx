





\DescribeMacro{fontencoding=\meta{encoding} (default:~\meta{doc~encoding})}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{设置用于排版代码的字体编码。}
^^A\colchunk
\par{Set font encoding used for typesetting code.}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk
{例如，|fontencoding=T1|。}
\colchunk
{For example, |fontencoding=T1|.}
\end{parcolumns}

\DescribeMacro{draft=\meta{boolean} (default:~false)}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{这仅使用\pkg{fancyvrb}进行所有排版；不使用\app{Pygments}。这是以失去语法高亮和一些其他\app{minted}功能为代价的，但编译速度更快。性能应与直接使用\pkg{fancyvrb}时基本相同；不使用外部临时文件。请注意，如果您在编译之间没有更改太多的代码，则缓存模式和草稿模式之间的性能差异可能很小。还请注意，草稿设置通常从文档类继承。}
^^A\colchunk
\par{This uses \pkg{fancyvrb} alone for all typesetting; \app{Pygments} is not used.  This trades syntax highlighting and some other \app{minted} features for faster compiling.  Performance should be essentially the same as using \pkg{fancyvrb} directly; no external temporary files are used.  Note that if you are not changing much code between compiles, the difference in performance between caching and draft mode may be minimal.  Also note that |draft| settings are typically inherited from the document class.}
^^A\end{parcolumns}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{草稿模式不支持|autogobble|。在草稿模式下，常规的|gobble|，|linenos|和大多数与语法高亮无关的选项仍将正常运行。}
^^A\colchunk
\par{Draft mode does not support |autogobble|.  Regular |gobble|, |linenos|, and most other options not related to syntax highlighting will still function in draft mode.}
^^A\end{parcolumns}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{通常可以在草稿模式下编译文档而无需使用shell escape。 \pkg{ifplatform}包可能会发出关于由于禁用了shell escape而导致功能有限的警告，但在几乎所有情况下都可以忽略此警告。 （仅当您的系统配置不寻常，使得|\ifwindows|宏必须借助shell escape来确定系统时，才真正需要shell escape。有关详细信息，请参见\pkg{ifplatform}文档。）}
^^A\colchunk
\par{Documents can usually be compiled without shell escape in draft mode.  The \pkg{ifplatform} package may issue a warning about limited functionality due to shell escape being disabled, but this may be ignored in almost all cases.  (Shell escape is only really required if you have an unusual system configuration such that the |\ifwindows| macro must fall back to using shell escape to determine the system.  See the \pkg{ifplatform} documentation for more details:  \url{http://www.ctan.org/pkg/ifplatform}.)}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{如果设置了|cache|选项，则在草稿模式下保留所有现有缓存文件。这允许在不需要每次完全重建缓存的情况下间歇性地使用缓存模式和草稿模式。一旦关闭草稿模式，未使用的缓存文件的自动清理将恢复。 （这假设辅助文件在此期间未被删除；它包含缓存历史记录，并允许自动清理未使用的文件。）}
^^A\colchunk
\par{If the |cache| option is set, then all existing cache files will be kept while draft mode is on.  This allows caching to be used intermitently with draft mode without requiring that the cache be completely recreated each time.  Automatic cleanup of cached files will resume as soon as draft mode is turned off.  (This assumes that the auxiliary file has not been deleted in the meantime; it contains the cache history and allows automatic cleanup of unused files.)}
^^A\end{parcolumns}



\DescribeMacro{final=\meta{boolean} (default:~true)}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{这是|draft|的相反；它等效于|draft=false|。\\同样，请注意，|draft|和|final|设置通常从文档类继承。}
^^A\colchunk
\par{This is the opposite of |draft|; it is equivalent to |draft=false|.  Again, note that |draft| and |final| settings are typically inherited from the document class.}
^^A\end{parcolumns}


\DescribeMacro{kpsewhich=\meta{boolean} (default:~false)}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{这个选项使用 |kpsewhich| 来定位需要突出显示的文件。一些构建工具（如 |texi2pdf|）通过修改 |TEXINPUTS| 来实现功能；在某些情况下，用户也可以自定义 |TEXINPUTS|。|kpsewhich| 选项允许 \pkg{minted} 与这些配置一起工作。}
^^A\colchunk
\par{This option uses |kpsewhich| to locate files that are to be highlighted.  Some build tools such as |texi2pdf| function by modifying |TEXINPUTS|; in some cases, users may customize |TEXINPUTS| as well.  The |kpsewhich| option allows \pkg{minted} to work with such configurations.}
^^A\end{parcolumns}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{该选项可能会在某些系统或某些系统配置下增加明显的开销。}
^^A\colchunk
\par{This option may add a noticeable amount of overhead on some systems, or with some system configurations.}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{该选项\emph{不}使得 \pkg{minted} 与 \LaTeX 的 |-output-directory| 和 |-aux-directory| 命令行选项一起工作。对于这些选项，请参见 |outputdir| 包选项。}
^^A\colchunk
\par{This option does \emph{not} make \pkg{minted} work with the |-output-directory| and |-aux-directory| command-line options for \LaTeX.  For those, see the |outputdir| package option.}
^^A\end{parcolumns}



 \DescribeMacro{linenos=\meta{boolean} (default:~false)}
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{\pkg{minted} 在后台使用 \pkg{fancyvrb} 宏包进行代码排版。 \pkg{fancyvrb} 提供了一个选项 |firstnumber|，允许指定环境的起始行号。为了方便起见，还有一个选项 |firstnumber=last|，允许行号从上一个环境结束的地方继续。|langlinenos| 选项使得 |firstnumber| 可以对每个语言进行单独设置，对于所有 |minted| 和 |\mint| 的使用情况。例如，考虑以下代码和输出。}
^^A\colchunk
\par{\pkg{minted} uses the \pkg{fancyvrb} package behind the scenes for the code typesetting.  \pkg{fancyvrb} provides an option |firstnumber| that allows the starting line number of an environment to be specified.  For convenience, there is an option |firstnumber=last| that allows line numbering to pick up where it left off.  The |langlinenos| option makes |firstnumber| work for each language individually with all |minted| and |\mint| usages.  For example, consider the code and output below.}
^^A\end{parcolumns}


 \begin{VerbatimOut}[gobble=1]{minted.doc.out}
   \begin{minted}[linenos]{python}
   def f(x):
       return x**2
   \end{minted}

   \begin{minted}[linenos]{ruby}
   def func
       puts "message"
   end
   \end{minted}

   \begin{minted}[linenos, firstnumber=last]{python}
   def g(x):
       return 2*x
   \end{minted}
 \end{VerbatimOut}
 \inputminted[frame=single, rulecolor=minted@linkcolor]{latex}{minted.doc.out}
 \hfill
 \colorbox{minted@samplebg}{\begin{minipage}{0.6\textwidth}
   \input{minted.doc.out}
 \end{minipage}}
 \hfill\hfill

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{如果没有使用 |langlinenos| 选项，则第二个 Python 环境中的行号将不会从第一个 Python 环境结束的地方开始编号，而是从 Ruby 的行号开始。}
^^A\colchunk
\par{Without the |langlinenos| option, the line numbering in the second Python environment would not pick up where the first Python environment left off.  Rather, it would pick up with the Ruby line numbering.}
^^A\end{parcolumns}



\DescribeMacro{newfloat=\meta{boolean} (default:~false)}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{默认情况下，|listing| 环境使用 \pkg{float} 宏包创建。|newfloat| 选项使用 \pkg{newfloat} 来创建该环境，这可以更好地与 \pkg{caption} 宏包集成。}
^^A\colchunk
\par{By default, the |listing| environment is created using the \pkg{float} package.  The |newfloat| option creates the environment using \pkg{newfloat} instead.  This provides better integration with the \pkg{caption} package.}
^^A\end{parcolumns}



\DescribeMacro{outputdir=\meta{directory} (default:~\meta{none})}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{对于\LaTeX{}中的 |-output-directory| 和 |-aux-directory|（MiKTeX）命令行选项，对于\pkg{minted}会造成问题，因为\pkg{minted}的临时文件保存在 |<outputdir>| 中，但\pkg{minted}仍会在文档根目录中查找它们。无法访问命令行选项的值，以便\pkg{minted}可以自动查找正确的位置。但是，可以将输出目录手动指定为包选项。}
^^A\colchunk
\par{The |-output-directory| and |-aux-directory| (MiKTeX) command-line options for \LaTeX\ cause problems for \pkg{minted}, because the \pkg{minted} temporary files are saved in |<outputdir>|, but \pkg{minted} still looks for them in the document root directory.  There is no way to access the value of the command-line option so that \pkg{minted} can automatically look in the right place.  But it is possible to allow the output directory to be specified manually as a package option.}
^^A\end{parcolumns}

^^A \footnote{译注：可以这样，在指定的目录下编译，比如，切换到/Volumes/RamDisk/ 目录\mintinline{shell}|xelatex --output-directory=/Volumes/RamDisk/ -synctex=1 -shell-escape /Users/virhuiai/hlProjects/Latex-Typesetting-Hub/宏包文档翻译/minted/minted-cn.dtx|}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{应使用绝对路径或相对于文档根目录的路径来指定输出目录。路径应使用正斜杠，即使在Windows下也是如此。必须转义特殊字符，而空格则需要用引号引起来，并需要用大括号|{}|将整个\meta{directory}包装起来。有关转义和引用的示例，请参见上面的|cachedir|。}
^^A\colchunk
\par{The output directory should be specified using an absolute path or a path relative to the document root directory.  Paths should use forward slashes, even under Windows.  Special characters must be escaped, while spaces require quoting and need the entire \meta{directory} to be wrapped in curly braces |{}|.  See |cachedir| above for examples of escaping and quoting.}
^^A\end{parcolumns}





\subsection{Macro option usage\\宏选项用法}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{所有\pkg{minted}高亮命令都接受相同的选项集。选项指定为逗号分隔的|key=value|对的列表。例如，我们可以指定行应编号：}
^^A\colchunk
\par{All \pkg{minted} highlighting commands accept the same set of options.
Options are specified as a comma-separated list of |key=value| pairs.
For example, we can specify that the lines should be numbered:}
^^A\end{parcolumns}


% \begin{example}
%   \begin{minted}[linenos=true]{c++}
%   #include <iostream>
%   int main() {
%       std::cout << "Hello "
%                 << "world"
%                 << std::endl;
%   }
%   \end{minted}
% \end{example}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{选项值|true|也可以完全省略（包括“|=|”）。要进一步自定义行号的显示，请覆盖|\theFancyVerbLine|命令。有关详细信息，请参阅\pkg{fancyvrb}文档。}
^^A\colchunk
\par{An option value of |true| may also be omitted entirely (including the ``|=|'').
To customize the display of the line numbers further, override the |\theFancyVerbLine| command.
Consult the \pkg{fancyvrb} documentation for details.}
^^A\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk
{|\mint|接受相同的选项：}
\colchunk
{|\mint| accepts the same options:}
\end{parcolumns}
 

\begin{example}
   \mint[linenos]{perl}|$x=~/foo/|
\end{example}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{这里是另一个示例：我们想在注释中使用\LaTeX{}数学模式：}
^^A\colchunk
\par{Here's another example: we want to use the \LaTeX{} math mode inside comments:}
^^A\end{parcolumns}

% \begin{example}
%   \begin{minted}[mathescape]{python}
%   # Returns $\sum_{i=1}^{n}i$
%   def sum_from_one_to(n):
%       r = range(1, n + 1)
%       return sum(r)
%   \end{minted}
% \end{example}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{为了使您的\LaTeX{}代码更易于阅读，您可能希望在|minted|环境中缩进代码。选项|gobble|从输出中删除这些不必要的空白字符。还有一个|autogobble|选项，它会自动检测这个空格的长度。}
^^A\colchunk
\par{To make your \LaTeX{} code more readable you might want to indent the code inside a |minted|
environment.
The option |gobble| removes these unnecessary whitespace characters from the output.  There is also an |autogobble| option that detects the length of this whitespace automatically.}
^^A\end{parcolumns}


 \begin{example}
   \begin{minted}[gobble=2,
     showspaces]{python}
     def boring(args = None):
         pass
   \end{minted}

   versus

   \begin{minted}[showspaces]{python}
     def boring(args = None):
         pass
   \end{minted}
 \end{example}

 \DescribeMacro{\setminted}
 您可能希望为整个文档或整个语言设置选项。这可以通过使用命令

 You may wish to set options for the document as a whole, or for an entire language.  This is possible via 

 \cmd\setminted\oarg{language}\marg{key=value,...}

实现。特定于语言的选项会覆盖文档范围内的选项。个别命令和环境选项会覆盖特定于语言的选项。


Language-specific options override document-wide options.  Individual command and environment options override language-specific options.


 

 \DescribeMacro{\setmintedinline}
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{您可能希望为\cmd\mintinline 单独设置选项，无论是为整个文档还是为特定语言。这可以通过使用命令\cmd\setmintedinline 实现。语法如下：

\cmd\setmintedinline\oarg{language}\marg{key=value,...}}
^^A\colchunk
\par{You may wish to set separate options for \cmd\mintinline, either for the document as a whole or for a specific language.  This is possible via \cmd\setmintedinline.  The syntax is}
^^A\end{parcolumns}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{特定于语言的选项会覆盖文档范围内的选项。个别命令选项会覆盖特定于语言的选项。所有使用\cmd\setmintedinline\ 指定的设置都会覆盖使用\cmd\setminted\ 指定的设置。也就是说，内联设置的优先级始终高于一般设置。}
^^A\colchunk
\par{Language-specific options override document-wide options. Individual command options override language-specific options.  All settings specified with \cmd\setmintedinline\ override those set with \cmd\setminted.  That is, inline settings always have a higher precedence than general settings.}
^^A\end{parcolumns}


 \subsection{Available options\\可用选项}

 \newcommand\appliesto[1]{\textsf{[For #1 only]}}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{以下是可用选项的完整列表。有关更详细的选项描述，请参阅\pkg{fancyvrb}和\app{Pygments}文档。}
^^A\colchunk
\par{Following is a full list of available options.
For more detailed option descriptions please refer to the \pkg{fancyvrb} and \app{Pygments} documentation.}
^^A\end{parcolumns}


 
 \begin{optionlist}
   \item[autogobble (boolean) (false)]
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\vspace*{-2\parskip}
^^A\colchunk
{从代码中删除（gobble）所有常见的前导空格。基本上是自动确定要删除什么的 |gobble| 的版本。适用于最初未缩进但在粘贴到\LaTeX\ 文档后手动缩进的代码。}
^^A\colchunk
\par{Remove (gobble) all common leading whitespace from code.  Essentially a version of |gobble| that automatically determines what should be removed.  Good for code that originally is not indented, but is manually indented after being pasted into a \LaTeX\ document.}
^^A\end{parcolumns}

 \begin{example}
   ...text.
   \begin{minted}[autogobble]{python}
       def f(x):
           return x**2
   \end{minted}
 \end{example}

   \item[baselinestretch (dimension) (\meta{document default})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{用于代码列表内部的行距的值。}
^^A\colchunk
\par{Value to use as for baselinestretch inside the listing.}
^^A\end{parcolumns}
     


 \item[beameroverlays (boolean) (false)]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在使用 |escapeinside| 和 |texcomments| 时，为 |<| 和 |>| 字符提供其正常的文本含义，以便形式为 |\only<1>{...}| 的\pkg{beamer}叠加效果正常工作。}
^^A\colchunk
\par{Give the |<| and |>| characters their normal text meanings when used with |escapeinside| and |texcomments|, so that \pkg{beamer} overlays of the form |\only<1>{...}| will work.}
^^A\end{parcolumns}



\item[breakafter (string) (\meta{none})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{（当\texttt{breaklines=true}时）在指定的字符后换行，而不仅仅在空格处换行。不适用于 |\mintinline|。}
^^A\colchunk
\par{Break lines after specified characters, not just at spaces, when \texttt{breaklines=true}.  Does not apply to |\mintinline|.}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{例如，\texttt{breakafter=-/} 允许在连字符或斜杠后面断行。 \texttt{breakafter} 中给定的特殊字符应进行反斜杠转义（通常为 \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}；通过 \texttt{\textbackslash\textbackslash} 可以获得反斜杠 \texttt{\textbackslash}）。}
^^A\colchunk
\par{For example, \texttt{breakafter=-/} would allow breaks after any hyphens or slashes.  Special characters given to \texttt{breakafter} should be backslash-escaped (usually \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}; the backslash \texttt{\textbackslash} may be obtained via \texttt{\textbackslash\textbackslash}).}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.5\linewidth}]{2}
^^A\colchunk
\par{另一种选择，请参见 \texttt{breakbefore}。当为相同字符使用 \texttt{breakbefore} 和 \texttt{breakafter} 时，\texttt{breakbeforegroup} 和 \texttt{breakaftergroup} 必须具有相同的设置。}
^^A\colchunk
\par{For an alternative, see \texttt{breakbefore}.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.}
^^A\end{parcolumns}


 \begin{longexample}
   \begin{minted}[breaklines, breakafter=d]{python}
   some_string = 'SomeTextThatGoesOnAndOnForSoLongThatItCouldNeverFitOnOneLine'
   \end{minted}
 \end{longexample}

   \item[breakaftergroup] (boolean) (true)
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.5\linewidth}]{2}
^^A\colchunk
{当使用 \texttt{breakafter} 时，将所有相邻的相同字符分组在一起，并仅在最后一个字符后允许断行。当为相同字符使用 \texttt{breakbefore} 和 \texttt{breakafter} 时，\texttt{breakbeforegroup} 和 \texttt{breakaftergroup} 必须具有相同的设置。}
^^A\colchunk
\par{When \texttt{breakafter} is used, group all adjacent identical characters together, and only allow a break after the last character.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.}
^^A\end{parcolumns}


   \item[breakaftersymbolpre (string) (\string\,\string\footnotesize\string\ensuremath\{\_\string\rfloor\}, \,\footnotesize\ensuremath{_\rfloor})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在由 \texttt{breakafter} 插入的换行符前插入的符号。}
^^A\colchunk
\par{The symbol inserted pre-break for breaks inserted by \texttt{breakafter}.}
^^A\end{parcolumns}
     

   \item[breakaftersymbolpost (string) (\meta{none})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在由 \texttt{breakafter} 插入的换行符后插入的符号。}
^^A\colchunk
\par{The symbol inserted post-break for breaks inserted by \texttt{breakafter}.}
^^A\end{parcolumns}
     

   \item[breakanywhere (boolean) (false)]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在 \texttt{breaklines = true} 时，不仅在空格处，而是在任何位置断行。不适用于 |\mintinline|。}
^^A\colchunk
\par{Break lines anywhere, not just at spaces, when \texttt{breaklines=true}.  Does not apply to |\mintinline|.}
^^A\end{parcolumns}


 \begingroup
 \fvset{xrightmargin=1em}
 \begin{longexample}
   \begin{minted}[breaklines, breakanywhere]{python}
   some_string = 'SomeTextThatGoesOnAndOnForSoLongThatItCouldNeverFitOnOneLine'
   \end{minted}
 \end{longexample}
 \endgroup

   \item[breakanywheresymbolpre (string) (\string\,\string\footnotesize\string\ensuremath\{\_\string\rfloor\}, \,\footnotesize\ensuremath{_\rfloor})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在由 \texttt{breakanywhere} 插入的换行符前插入的符号。}
^^A\colchunk
\par{The symbol inserted pre-break for breaks inserted by \texttt{breakanywhere}.}
^^A\end{parcolumns}   


   \item[breakanywheresymbolpost (string) (\meta{none})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在由 \texttt{breakanywhere} 插入的换行符后插入的符号。}
^^A\colchunk
\par{The symbol inserted post-break for breaks inserted by \texttt{breakanywhere}.}
^^A\end{parcolumns}


   \item[breakautoindent (boolean) (true)]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{自动缩进延续行，使其缩进等级与第一行相同。当同时使用 \texttt{breakautoindent} 和 \texttt{breakindent} 时，缩进会加和。此缩进与 \texttt{breaksymbolindentleft} 组合以给出总实际左缩进。不适用于 \texttt{\string\mintinline}。}
^^A\colchunk
\par{When a line is broken, automatically indent the continuation lines to the indentation level of the first line.  When \texttt{breakautoindent} and \texttt{breakindent} are used together, the indentations add.  This  indentation is combined with \texttt{breaksymbolindentleft} to give the total actual left indentation.  Does not apply to \texttt{\string\mintinline}.}
^^A\end{parcolumns}


   \item[breakbefore (string) (\meta{none})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{当 \texttt{breaklines=true} 时，在指定字符之前而非仅在空格处断行。不适用于 |\mintinline|。}
^^A\colchunk
\par{Break lines before specified characters, not just at spaces, when \texttt{breaklines=true}.  Does not apply to |\mintinline|.}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{例如，\texttt{breakbefore=A} 允许在大写字母 A 之前断行。应对特殊字符应使用反斜杠转义 (通常为 \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}；反斜杠 \texttt{\textbackslash} 可通过 \texttt{\textbackslash\textbackslash} 获得)。}
^^A\colchunk
\par{For example, \texttt{breakbefore=A} would allow breaks before capital A's.  Special characters given to \texttt{breakbefore} should be backslash-escaped (usually \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}; the backslash \texttt{\textbackslash} may be obtained via \texttt{\textbackslash\textbackslash}).}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{另请参见 \texttt{breakafter}。当 \texttt{breakbefore} 和 \texttt{breakafter} 用于相同字符时，\texttt{breakbeforegroup} 和 \texttt{breakaftergroup} 必须具有相同的设置。}
^^A\colchunk
\par{For an alternative, see \texttt{breakafter}.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.}
^^A\end{parcolumns}


 \begin{longexample}
   \begin{minted}[breaklines, breakbefore=A]{python}
   some_string = 'SomeTextThatGoesOnAndOnForSoLongThatItCouldNeverFitOnOneLine'
   \end{minted}
 \end{longexample}

\item[breakbeforegroup] (boolean) (true)
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{当使用 \texttt{breakbefore} 时，将所有相邻的相同字符分组在一起，并仅在第一个字符之前允许断行。当 \texttt{breakbefore} 和 \texttt{breakafter} 用于相同字符时，\texttt{breakbeforegroup} 和 \texttt{breakaftergroup} 必须具有相同的设置。}
^^A\colchunk
\par{When \texttt{breakbefore} is used, group all adjacent identical characters together, and only allow a break before the first character.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.}
^^A\end{parcolumns}


\item[breakbeforesymbolpre (string) (\string\,\string\footnotesize\string\ensuremath\{\_\string\rfloor\}, \,\footnotesize\ensuremath{_\rfloor})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{用于由 \texttt{breakbefore} 插入断行的前置符号。}
^^A\colchunk
\par{The symbol inserted pre-break for breaks inserted by \texttt{breakbefore}.}
^^A\end{parcolumns}


\item[breakbeforesymbolpost (string) (\meta{none})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{用于由 \texttt{breakbefore} 插入断行的后置符号。}
^^A\colchunk
\par{The symbol inserted post-break for breaks inserted by \texttt{breakbefore}.}
^^A\end{parcolumns}


\item[breakbytoken (boolean) (false)]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{仅在不在标记中的位置处断行；防止标记被行中断开。默认情况下，\texttt{breaklines} 在最靠近边缘的空格处断行。虽然这可以使必需的换行数最小化，但如果在字符串或类似标记的中间出现换行，则可能会不方便。}
^^A\colchunk
\par{Only break lines at locations that are not within tokens; prevent tokens from being split by line breaks.  By default, \texttt{breaklines} causes line breaking at the space nearest the margin.  While this minimizes the number of line breaks that are necessary, it can be inconvenient if a break occurs in the middle of a string or similar token.}
^^A\end{parcolumns}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{这与\texttt{draft}模式不兼容。Pygments标记的完整列表可在\url{http://pygments.org/docs/tokens/}上找到。如果\texttt{breakbytoken}提供的断点出现在意外的位置，则可能表明该语言的Pygments词法分析器存在缺陷或短板。}
^^A\colchunk
\par{This is not compatible with \texttt{draft} mode.  A complete list of Pygments tokens is available at \url{http://pygments.org/docs/tokens/}.  If the breaks provided by \texttt{breakbytoken} occur in unexpected locations, it may indicate a bug or shortcoming in the Pygments lexer for the language.}
^^A\end{parcolumns}


\item[breakbytokenanywhere (boolean) (false)] 
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{类似于\texttt{breakbytoken}，但还允许在紧邻的标记之间，而不仅仅是在由空格分隔的标记之间换行。与\texttt{breakanywhere}一起使用\texttt{breakbytokenanywhere}是多余的。}
^^A\colchunk
\par{Like \texttt{breakbytoken}, but also allows line breaks between immediately adjacent tokens, not just between tokens that are separated by spaces.  Using \texttt{breakbytokenanywhere} with \texttt{breakanywhere} is redundant.}
^^A\end{parcolumns}


\item[breakindent (dimension) (\meta{breakindentnchars})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{当断行时，将续行缩进这么多。当同时使用|breakautoindent|和|breakindent|时，缩进会相加。此缩进与|breaksymbolindentleft|结合使用，以给出总实际左缩进量。}
^^A\colchunk
\par{When a line is broken, indent the continuation lines by this amount.  When |breakautoindent| and |breakindent| are used together, the indentations add.  This  indentation is combined with |breaksymbolindentleft| to give the total actual left indentation.}
^^A\end{parcolumns}

^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{不适用于\texttt{\string\mintinline}。}
^^A\colchunk
\par{Does not apply to \texttt{\string\mintinline}.}
^^A\end{parcolumns}


\item[breakindentnchars (integer) (0)]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{这允许将|breakindent|指定为字符数的整数，而不是作为维度（假定为固定宽度字体）。}
^^A\colchunk
\par{This allows |breakindent| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).}
^^A\end{parcolumns}


\item[breaklines (boolean) (false)] 
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在\texttt{minted}环境和\texttt{\string\mint}命令中自动换行长行，并在\texttt{\string\mintinline}中换行较长的行。}
^^A\colchunk
\par{Automatically break long lines in \texttt{minted} environments and \texttt{\string\mint} commands, and wrap longer lines in \texttt{\string\mintinline}.}
^^A\end{parcolumns}



^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{默认情况下，在空格字符处自动换行。使用\texttt{breakanywhere}启用任意位置的换行；使用\texttt{breakbytoken}、\texttt{breakbytokenanywhere}、\texttt{breakbefore}和\texttt{breakafter}进行更精细的换行。目前，仅\texttt{breakbytoken}和\texttt{breakbytokenanywhere}与|\mintinline|一起使用。使用\texttt{escapeinside}转义到\LaTeX 并插入手动换行也是一种选择。例如，使用\texttt{escapeinside=||}，然后在适当的位置插入\texttt{|\textbackslash\textbackslash|}。（请注意，\texttt{escapeinside}不适用于字符串内部。）}
^^A\colchunk
\par{By default, automatic breaks occur at space characters.  Use \texttt{breakanywhere} to enable breaking anywhere; use \texttt{breakbytoken}, \texttt{breakbytokenanywhere}, \texttt{breakbefore}, and \texttt{breakafter} for more fine-tuned breaking.  Currently, only \texttt{breakbytoken} and \texttt{breakbytokenanywhere} work with |\mintinline|.  Using \texttt{escapeinside} to escape to \LaTeX\ and then insert a manual break is also an option.  For example, use \texttt{escapeinside=||}, and then insert \texttt{|\textbackslash\textbackslash|} at the appropriate point.  (Note that \texttt{escapeinside} does not work within strings.)}
^^A\end{parcolumns}


 \begin{example}
   ...text.
   \begin{minted}[breaklines]{python}
   def f(x):
       return 'Some text ' + str(x)
   \end{minted}
 \end{example}


^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{\texttt{minted}和\texttt{\string\mint}中的断行可以通过多种方式自定义。要自定义断行行的缩进，请参见\texttt{breakindent}和\texttt{breakautoindent}。要自定义行延续符号，请使用\texttt{breaksymbolleft}和\texttt{breaksymbolright}。要自定义延续符号与代码之间的间隔，请使用\texttt{breaksymbolsepleft}和\texttt{breaksymbolsepright}。要自定义为断裂符号提供的额外缩进，请使用\texttt{breaksymbolindentleft}和\texttt{breaksymbolindentright}。由于默认情况下仅使用左手符号，因此还可以使用别名选项\texttt{breaksymbol}，\texttt{breaksymbolsep}和\texttt{breaksymbolindent}进行修改。请注意，由于在行内上下文中不相关，因此这些选项均不适用于\texttt{\string\mintinline}。}
^^A\colchunk
\par{Breaking in \texttt{minted} and \texttt{\string\mint} may be customized in several ways.  To customize the indentation of broken lines, see \texttt{breakindent} and \texttt{breakautoindent}.  To customize the line continuation symbols, use \texttt{breaksymbolleft} and \texttt{breaksymbolright}.  To customize the separation between the continuation symbols and the code, use \texttt{breaksymbolsepleft} and \texttt{breaksymbolsepright}.  To customize the extra indentation that is supplied to make room for the break symbols, use \texttt{breaksymbolindentleft} and \texttt{breaksymbolindentright}.  Since only the left-hand symbol is used by default, it may also be modified using the alias options \texttt{breaksymbol}, \texttt{breaksymbolsep}, and \texttt{breaksymbolindent}.  Note than none of these options applies to \texttt{\string\mintinline}, since they are not relevant in the inline context.}
^^A\end{parcolumns}

^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{下面是一个使用这些选项自定义\texttt{minted}环境的示例。它使用\pkg{dingbat}包中的\texttt{\string\carriagereturn}符号。}
^^A\colchunk
\par{An example using these options to customize the \texttt{minted} environment is shown below.  This uses the \texttt{\string\carriagereturn} symbol from the \pkg{dingbat} package.}
^^A\end{parcolumns}
 

 \begingroup
 \fvset{breaklines, xleftmargin=2em, xrightmargin=2em}
 \begin{longexample}
   \begin{minted}[breaklines,
                  breakautoindent=false,
                  breaksymbolleft=\raisebox{0.8ex}{
                    \small\reflectbox{\carriagereturn}},
                  breaksymbolindentleft=0pt,
                  breaksymbolsepleft=0pt,
                  breaksymbolright=\small\carriagereturn,
                  breaksymbolindentright=0pt,
                  breaksymbolsepright=0pt]{python}
   def f(x):
       return 'Some text ' + str(x) + ' some more text ' + str(x) + ' even more text that goes on for a while'
   \end{minted}
 \end{longexample}
 \endgroup

 ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{使用带有大量文本背景色的\app{Pygments}样式的自动换行受到限制。这种着色是通过\texttt{\string\colorbox}实现的，它无法跨行换行。可能可以创建一个支持换行的\texttt{\string\colorbox}替代方案，例如使用\pkg{TikZ}，但作者不知道有什么令人满意的解决方案。唯一的当前替代方案是重新定义\texttt{\string\colorbox}，使其不起作用。例如，}
^^A\colchunk
\par{Automatic line breaks are limited with \app{Pygments} styles that use a colored background behind large chunks of text.  This coloring is accomplished with \texttt{\string\colorbox}, which cannot break across lines.  It may be possible to create an alternative to \texttt{\string\colorbox} that supports line breaks, perhaps with \pkg{TikZ}, but the author is unaware of a satisfactory solution.  The only current alternative is to redefine \texttt{\string\colorbox} so that it does nothing.  For example,}
^^A\end{parcolumns}
     
\begin{Verbatim}
\AtBeginEnvironment{minted}{\renewcommand{\colorbox}[3][]{#3}}
\end{Verbatim}
^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{使用\pkg{etoolbox}包在所有\texttt{minted}环境中重新定义\texttt{\string\colorbox}。}
^^A\colchunk
\par{uses the \pkg{etoolbox} package to redefine \texttt{\string\colorbox} within all \texttt{minted} environments.}
^^A\end{parcolumns}
     

    ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{如果您使用\texttt{showspaces=true}，则自动换行将不起作用，除非您使用\texttt{breakanywhere}或\texttt{breakafter=\string\space}。}
^^A\colchunk
\par{Automatic line breaks will not work with \texttt{showspaces=true} unless you use \texttt{breakanywhere} or \texttt{breakafter=\string\space}.}
^^A\end{parcolumns}
     

   \item[breaksymbol (string) (breaksymbolleft)]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{\texttt{breaksymbolleft} 的别名。}
^^A\colchunk
\par{Alias for \texttt{breaksymbolleft}.}
^^A\end{parcolumns}
     

   \item[breaksymbolleft (string) (\string\tiny\string\ensuremath\{\string\hookrightarrow\}, {\tiny\ensuremath{\hookrightarrow}})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在\texttt{breaklines=true}时，用于表示续行的符号。若要没有符号，则将 \texttt{breaksymbolleft} 设置为空字符串（“\texttt{=，}”或“\texttt{={}}”）即可。当使用时，该符号被包装在花括号 \texttt{{}} 中，因此不会出现格式命令（如\texttt{\string\tiny}）的“逃逸”。}
^^A\colchunk
\par{The symbol used at the beginning (left) of continuation lines when \texttt{breaklines=true}.  To have no symbol, simply set \texttt{breaksymbolleft} to an empty string (``\texttt{=,}'' or ``\texttt{=\{\}}'').  The symbol is wrapped within curly braces \texttt{\{\}} when used, so there is no danger of formatting commands such as \texttt{\string\tiny} ``escaping.''}
^^A\end{parcolumns}
     
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{\texttt{\string\hookrightarrow} 和 \texttt{\string\hookleftarrow} 可通过 \pkg{graphicx} 提供的 \texttt{\string\rotatebox} 命令进行进一步定制。其他可能有用的箭头类型符号可在 \pkg{dingbat}（\texttt{\string\carriagereturn}）和 \pkg{mnsymbol}（钩和曲线箭头）等包中获得。}
^^A\colchunk
\par{The \texttt{\string\hookrightarrow} and \texttt{\string\hookleftarrow} may be further customized by the use of the \texttt{\string\rotatebox} command provided by \pkg{graphicx}.  Additional arrow-type symbols that may be useful are available in the \pkg{dingbat} (\texttt{\string\carriagereturn}) and \pkg{mnsymbol} (hook and curve arrows) packages, among others.}
^^A\end{parcolumns}
     

     ^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{不适用于 \texttt{\string\mintinline}。}
^^A\colchunk
\par{Does not apply to \texttt{\string\mintinline}.}
^^A\end{parcolumns}
     

   \item[breaksymbolright (string) (\meta{none})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在 \texttt{breaklines=true} 时，在断点（右侧）使用的符号。不会出现在断行的最后一个片段的末尾。}
^^A\colchunk
\par{The symbol used at breaks (right) when \texttt{breaklines=true}. Does not appear at the end of the very last segment of a broken line.}
^^A\end{parcolumns}
     


 \item[breaksymbolindent (dimension) (\meta{breaksymbolindentleftnchars})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{\texttt{breaksymbolindentleft} 的别名。}
^^A\colchunk
\par{Alias for |breaksymbolindentleft|.}
^^A\end{parcolumns}
 

 \item[breaksymbolindentnchars (integer) (\meta{breaksymbolindentleftnchars})]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{\texttt{breaksymbolindentleftnchars} 的别名。}
^^A\colchunk
\par{Alias for |breaksymbolindentleftnchars|.}
^^A\end{parcolumns}
 


 \item[breaksymbolindentleft (dimension) (\meta{breaksymbolindentleftnchars})]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{为给 |breaksymbolleft| 留出空间而提供的额外左缩进。仅当存在 |breaksymbolleft| 时才应用此缩进。}
^^A\colchunk
\par{The extra left indentation that is provided to make room for |breaksymbolleft|.  This indentation is only applied when there is a |breaksymbolleft|.}

^^A \colplacechunks
^^A\colchunk
\par{不适用于 \texttt{\string\mintinline}。}
^^A\colchunk
\par{Does not apply to \texttt{\string\mintinline}.}
^^A\end{parcolumns}
 

     

 \item[breaksymbolindentleftnchars (integer) (4)]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{这允许将 |breaksymbolindentleft| 指定为字符的整数数量，而不是维度（假定为等宽字体）。}
^^A\colchunk
\par{This allows |breaksymbolindentleft| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).}
^^A\end{parcolumns}
 

 \item[breaksymbolindentright (dimension) (\meta{breaksymbolindentrightnchars})]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{为给 |breaksymbolright| 留出空间而提供的额外右缩进。仅当存在 |breaksymbolright| 时才应用此缩进。}
^^A\colchunk
\par{The extra right indentation that is provided to make room for |breaksymbolright|.  This indentation is only applied when there is a |breaksymbolright|.}
^^A\end{parcolumns}
 

 \item[breaksymbolindentrightnchars (integer) (4)]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{这允许将 |breaksymbolindentright| 指定为字符的整数数量，而不是维度（假定为等宽字体）。}
^^A\colchunk
\par{This allows |breaksymbolindentright| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).}
^^A\end{parcolumns}
 


 \item[breaksymbolsep (dimension) (\meta{breaksymbolsepleftnchars})]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{\texttt{breaksymbolsepleft} 的别名。}
^^A\colchunk
\par{Alias for |breaksymbolsepleft|.}
^^A\end{parcolumns}
 

 \item[breaksymbolsepnchars (integer) (\meta{breaksymbolsepleftnchars})]
^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{|breaksymbolsepleftnchars|的别名。}
^^A\colchunk
\par{Alias for |breaksymbolsepleftnchars|.}
^^A\end{parcolumns}
 


 \item[breaksymbolsepleft (dimension) (\meta{breaksymbolsepleftnchars})]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{|breaksymbolleft|和相邻文本之间的间距。}
^^A\colchunk
\par{The separation between the |breaksymbolleft| and the adjacent text. }
^^A\end{parcolumns}
 

 \item[breaksymbolsepleftnchars (integer) (2)]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{允许将|breaksymbolsepleft|指定为字符数的整数，而不是作为尺寸（假定固定宽度字体）。}
^^A\colchunk
\par{Allows |breaksymbolsepleft| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).}
^^A\end{parcolumns}
 


 \item[breaksymbolsepright (dimension) (\meta{breaksymbolseprightnchars})]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{|breaksymbolright|和相邻文本之间的\emph{最小}间距。这是|breaksymbolright|和相邻文本可以到达的最远范围之间的距离。实际上，|\linewidth|通常不会是字符宽度（假设固定宽度字体）的确切整数倍，因此|breaksymbolright|和相邻文本之间的实际间距通常会大于|breaksymbolsepright|。这确保了断行符与左右边缘的间距相同。如果希望获得相同的文本间距，请调整|breaksymbolsepright|。（有关实现详细信息，请参见\pkg{fvextra}中|\FV@makeLineNumber|的定义。）}
^^A\colchunk
\par{The \emph{minimum} separation between the |breaksymbolright| and the adjacent text.  This is the separation between |breaksymbolright| and the furthest extent to which adjacent text could reach.  In practice, |\linewidth| will typically not be an exact integer multiple of the character width (assuming a fixed-width font), so the actual separation between the |breaksymbolright| and adjacent text will generally be larger than |breaksymbolsepright|.  This ensures that break symbols have the same spacing from the margins on both left and right.  If the same spacing from text is desired instead, |breaksymbolsepright| may be adjusted.  (See the definition of |\FV@makeLineNumber| in \pkg{fvextra} for implementation details.)}
^^A\end{parcolumns}
 

 \item[breaksymbolseprightnchars (integer) (2)]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{允许将|breaksymbolsepright|指定为字符数的整数，而不是作为尺寸（假定固定宽度字体）。}
^^A\colchunk
\par{Allows |breaksymbolsepright| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).}
^^A\end{parcolumns}
 


   \item[bgcolor (string) (\meta{none})]
   ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{代码清单的背景颜色。请注意，此选项有几个限制（下面描述）；请参见下面的“框架替代方案”获取更强大的替代方案。}
^^A\colchunk
\par{Background color of the listing.  Be aware that this option has several limitations (described below); see ``Framing alternatives'' below for more powerful alternatives.}
^^A\end{parcolumns}
     

     ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{此选项的值\emph{不能}是颜色命令。相反，它必须是已经定义过的颜色的颜色\emph{名称}，给定为字符串：}
^^A\colchunk
\par{The value of this option must \emph{not} be a color command. Instead, it must be a color \emph{name}, given as a string, of a previously-defined color:}
^^A\end{parcolumns}
     

 \begin{example}
   \definecolor{bg}{rgb}{0.95,0.95,0.95}
   \begin{minted}[bgcolor=bg]{php}
   <?php
     echo "Hello, $x";
   ?>
   \end{minted}
 \end{example}

^^A  ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{这个选项将\texttt{minted}环境和\texttt{\string\mint}命令放置在\pkg{framed}包的\texttt{snugshade*}环境中，该环境支持跨页断行。(在\pkg{minted} 2.2之前，使用的是\texttt{minipage}，这会阻止分页并导致周围文本的不良间距。)请注意，如果在\texttt{breaklines=true}下使用\texttt{bgcolor}，并且在分页之前发生换行，则某些情况下文本可能会延伸到彩色背景下方。在这种情况下最好使用更高级的装框包；请参见下面的“其他装框包”。}
^^A\colchunk
\par{This option puts \texttt{minted} environments and \texttt{\string\mint} commands in a \texttt{snugshade*} environment from the \pkg{framed} package, which supports breaks across pages.  (Prior to \pkg{minted} 2.2, a \texttt{minipage} was used, which prevented page breaks and gave undesirable spacing from surrounding text.)  Be aware that if \texttt{bgcolor} is used with \texttt{breaklines=true}, and a line break occurs just before a page break, then text may extend below the colored background in some instances.  It is best to use a more advanced framing package in those cases; see ``Framing alternatives'' below.}
^^A\end{parcolumns}
 

 ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{这个选项将\texttt{\string\mintinline}置于\texttt{\string\colorbox}中，\textbf{不允许换行}。如果您想使用\texttt{\string\setminted}设置背景颜色，并且只想对\texttt{minted}和\texttt{\string\mint}使用背景颜色，则可以使用\texttt{\string\setmintedinline{bgcolor={}}}关闭行内命令的着色。}
^^A\colchunk
\par{This option puts \texttt{\string\mintinline} inside a \texttt{\string\colorbox}, which \textbf{does not allow line breaks}.  If you want to use \texttt{\string\setminted} to set background colors, and only want background colors on \texttt{minted} and \texttt{\string\mint}, you may use \texttt{\string\setmintedinline\{bgcolor=\{\}\}} to turn off the coloring for inline commands.}
^^A\end{parcolumns}
 

 ~

 \textbf{Framing alternatives\\其他装框包}

 ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{如果您想要更可靠和先进的背景颜色和装框选项，您应该考虑使用更高级的装框包，例如\pkg{mdframed}或\pkg{tcolorbox}。使用\pkg{etoolbox}包，可以轻松地将框架添加到\pkg{minted}命令和环境中，该包会自动加载到\pkg{minted}中。例如，使用\pkg{mdframed}：}
^^A\colchunk
\par{If you want more reliable and advanced options for background colors and framing, you should consider a more advanced framing package such as \pkg{mdframed} or \pkg{tcolorbox}.  It is easy to add framing to \pkg{minted} commands and environments using the \pkg{etoolbox} package, which is automatically loaded by \pkg{minted}.  For example, using \pkg{mdframed}:}
^^A\end{parcolumns}
 
\begin{Verbatim}
\BeforeBeginEnvironment{minted}{\begin{mdframed}}
\AfterEndEnvironment{minted}{\end{mdframed}}
\end{Verbatim}
^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{一些装框包还提供了专门用于此目的的内置命令。例如，\pkg{mdframed}提供了一个\texttt{\string\surroundwithmdframed}命令，可用于为所有\texttt{minted}环境添加边框：}
^^A\colchunk
\par{Some framing packages also provide built-in commands for such purposes.  For example, \pkg{mdframed} provides a \texttt{\string\surroundwithmdframed} command, which could be used to add a frame to all \texttt{minted} environments:}
^^A\end{parcolumns}
 
\begin{Verbatim}
\surroundwithmdframed{minted}
\end{Verbatim}
^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{\pkg{tcolorbox}甚至提供了一个内置的装框环境，支持\pkg{minted}。只需在导言区使用\texttt{\string\tcbuselibrary{minted}}，然后在\texttt{tcblisting}环境中放置代码：}
^^A\colchunk
\par{\pkg{tcolorbox} even provides a built-in framing environment with \pkg{minted} support.  Simply use \texttt{\string\tcbuselibrary\{minted\}} in the preamble, and then put code within a \texttt{tcblisting} environment:}
^^A\end{parcolumns}
 
\begin{Verbatim}
\begin{tcblisting}{<tcb options>,
                   minted language=<language>,
                   minted style=<style>,
                   minted options={<option list>} }
<code>
\end{tcblisting}
\end{Verbatim}
^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{\pkg{tcolorbox} 提供了其他命令和环境，用于微调代码列表的外观和处理外部代码文件。}
^^A\colchunk
\par{\pkg{tcolorbox} provides other commands and environments for fine-tuning listing appearance and for working with external code files.}
^^A\end{parcolumns}
 

   \item[codetagify (list of strings) (\textrm{highlight \texttt{XXX}, \texttt{TODO}, \texttt{BUG}, and \texttt{NOTE}})]
   ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在注释和文档字符串中高亮显示特殊的代码标签。}
^^A\colchunk
\par{Highlight special code tags in comments and docstrings.}
^^A\end{parcolumns}
     

 \item[curlyquotes (boolean) (false)]
 ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{默认情况下，反引号 \texttt{\textasciigrave} 和打字机单引号 \texttt{\textquotesingle} 总是以字面形式出现，而不会变成左右卷曲的单引号 \texttt{`'}. 该选项允许在需要时将这些字符替换为卷曲引号。}
^^A\colchunk
\par{By default, the backtick \texttt{\textasciigrave} and typewriter single quotation mark \texttt{\textquotesingle} always appear literally, instead of becoming the left and right curly single quotation marks \texttt{`'}.  This option allows these characters to be replaced by the curly quotation marks when that is desirable.}
^^A\end{parcolumns}
 

   \item[encoding (string) (\meta{system-specific})]
   ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{设置 \app{Pygments} 期望的文件编码。也可参见 |outencoding|。}
^^A\colchunk
\par{Sets the file encoding that \app{Pygments} expects.  See also |outencoding|.}
^^A\end{parcolumns}
     
   \item[escapeinside (string) (\meta{none})]
   ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
{在 \texttt{\string(string\string)} 中指定的两个字符之间转义到 \LaTeX\ 中。两个字符之间的所有代码将被解释为 \LaTeX\ 并相应地排版。这允许进行额外的格式设置。转义字符不必相同。当将特殊的 \LaTeX\ 字符用作转义字符时（例如，\texttt{escapeinside=\textbackslash\#\textbackslash\%}），必须转义这些字符。需要 \app{Pygments} 2.0+。}
^^A\colchunk
\par{Escape to \LaTeX\ between the two characters specified in \texttt{\string(string\string)}.  All code between the two characters will be interpreted as \LaTeX\ and typeset accordingly.  This allows for additional formatting.  The escape characters need not be identical.  Special \LaTeX\ characters must be escaped when they are used as the escape characters (for example, \texttt{escapeinside=\textbackslash\#\textbackslash\%}).  Requires \app{Pygments} 2.0+.}
^^A\end{parcolumns}
   

   ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{\textbf{转义不适用于字符串和注释（对于注释，有 \texttt{texcomments}）。截至 Pygments 2.0.2，这意味着在某些词法分析器中，转义是“脆弱”的。} 由于 Pygments 实现了 \texttt{escapeinside} 的方式，任何类似于当前词法分析器中字符串或注释的“转义”\LaTeX\ 代码都可能会破坏 \texttt{escapeinside}。针对此情况，有一个 \href{https://bitbucket.org/birkenfeld/pygments-main/issue/1118}{Pygments 问题}。有关更多细节和某些场景的有限解决方法，请访问 \href{https://github.com/gpoore/minted/issues/70#issuecomment-111729930}{\pkg{minted} GitHub 站点}。}
^^A\colchunk
\par{\textbf{Escaping does not work inside strings and comments (for comments, there is \texttt{texcomments}).  As of Pygments 2.0.2, this means that escaping is ``fragile'' with some lexers.}  Due to the way that Pygments implements \texttt{escapeinside}, any ``escaped'' \LaTeX\ code that resembles a string or comment for the current lexer may break \texttt{escapeinside}.  There is a \href{https://bitbucket.org/birkenfeld/pygments-main/issue/1118}{Pygments issue} for this case.  Additional details and a limited workaround for some scenarios are available on the \href{https://github.com/gpoore/minted/issues/70#issuecomment-111729930}{\pkg{minted} GitHub site}.}
^^A\end{parcolumns}
 

 \begingroup  ^^A Need to prevent active "|" from causing problems
 \catcode`\|=11
 \begin{example}
   \begin{minted}[escapeinside=||]{py}
   def f(x):
       y = x|\colorbox{green}{**}|2
       return y
   \end{minted}
 \end{example}
 \endgroup

 ^^A ^^A\vspace*{-2\parskip}
^^A\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
^^A\colchunk
\par{请注意，当在转义符中使用数学内容时，除了在verbatim模式中通常活动的字符之外的任何活动字符都可能会导致问题。任何依赖于数学模式中特殊活动字符（例如\pkg{icomma}）的软件包将会产生错误，如\texttt{TeX capacity exceeded}和\texttt{\string\leavevmode \string\kern \string\z@}。可以通过修改\texttt{\string@noligs}来解决这个问题，方法见\url{http://tex.stackexchange.com/questions/223876}。}
^^A\colchunk
\par{\textbf{Note that when math is used inside escapes, any active characters beyond those that are normally active in verbatim can cause problems.}  Any package that relies on special active characters in math mode (for example, \pkg{icomma}) will produce errors along the lines of \texttt{TeX capacity exceeded} and \texttt{\string\leavevmode \string\kern \string\z@}.  This may be fixed by modifying \texttt{\string\@noligs}, as described at \url{http://tex.stackexchange.com/questions/223876}.}
^^A\end{parcolumns}
 
   \item[firstline (integer) (1)]
   要显示的第一行。在该行之前的所有行将被忽略并不会出现在输出中。
     The first line to be shown.
     All lines before that line are ignored and do not appear in the output.
     
   \item[firstnumber (auto \| last \| integer) (auto = 1)]
   第一行的行号。
   Line number of the first line.
   \item[fontfamily (family name) (tt)]
   要使用的字体系列。|tt|、|courier|和|helvetica|是预定义的。
     The font family to use.
     |tt|, |courier| and |helvetica| are pre-defined.
   \item[fontseries (series name) (auto \textrm{-- the same as the current font})]
   要使用的字体系列。
     The font series to use.
   \item[fontsize (font size) (auto \textrm{-- the same as the current font})]
   要使用的字体大小，以字号命令的形式，例如|\footnotesize|。
     The size of the font to use, as a size command, e.g. |\footnotesize|.
   \item[fontshape (font shape) (auto \textrm{-- the same as the current font})]
   要使用的字体形状。
     The font shape to use.
   \item[formatcom (command) (\meta{none})]
   在打印verbatim文本之前执行的格式化命令。
     A format to execute before printing verbatim text.
   \item[frame (none \| leftline \| topline \| bottomline \| lines \| single) (none)]
   围绕源代码清单的框架类型。
     The type of frame to put around the source code listing.
   \item[framerule (dimension) (0.4pt)]
   框架的宽度。
     Width of the frame.
   \item[framesep (dimension) (\cmd\fboxsep)]
   框架和内容之间的距离。
     Distance between frame and content.
   \item[funcnamehighlighting (boolean) (true)] \appliesto{PHP}
   如果为|true|，则会突出显示内置函数名称。
     If |true|, highlights built-in function names.
   \item[gobble (integer) (0)]
   从每个输入行中删除前$n$个字符。
     Remove the first $n$ characters from each input line.

 \item[highlightcolor (string) (LightCyan)]
 设置用于|highlightlines|的颜色，使用\pkg{color}或\pkg{xcolor}中的预定义颜色名称或通过|\definecolor|定义的颜色。

 Set the color used for |highlightlines|, using a predefined color name from \pkg{color} or \pkg{xcolor}, or a color defined via |\definecolor|.


 \item[highlightlines (string) (\meta{none})]
 基于行号突出显示单个行或一系列行。例如，|highlightlines={1, 3-4}|。行号是指如果|linenos=true|等，则会出现的行号。它们不是指在使用|firstnumber|进行调整之前的原始或实际行号。

 This highlights a single line or a range of lines based on line numbers.  For example, |highlightlines={1, 3-4}|.  The line numbers refer to the line numbers that would appear if |linenos=true|, etc.  They do not refer to original or actual line numbers before adjustment by |firstnumber|.

 突出显示的颜色可以通过|highlightcolor|进行自定义。

 The highlighting color can be customized with |highlightcolor|.


   \item[keywordcase] (string) (lower)
   更改关键字的大小写。取值为|lower|、|upper|或|capitalize|。

     Changes capitalization of keywords.  Takes |lower|, |upper|, or |capitalize|.
   \item[label (string) (\emph{empty})]
   在代码框的顶部、底部或两者都添加标签。
有关更多信息和示例，请参见 \pkg{fancyvrb} 文档。
\emph{注意：}这不会在当前列表中添加 |\label|。要实现这一点，应使用浮动环境（第 \ref{sec:float} 节）。

     Add a label to the top, the bottom or both of the frames around the code.
     See the \pkg{fancyvrb} documentation for more information and examples.
     \emph{Note:} This does \emph{not} add a |\label| to the current listing.
     To achieve that, use a floating environment (section \ref{sec:float}) instead.
   \item[labelposition (none \| topline \| bottomline \| all) (topline, all,  \textrm{or} none)]
   打印标签的位置（参见上文；默认值：如果定义了一个标签，则为 |topline|，如果定义了两个标签，则为 |all|，否则为 |none|）。
有关更多信息，请参见 \pkg{fancyvrb} 文档。

     Position where to print the label (see above;  default: |topline| if one label is defined, |all| if two are defined, |none| else).
     See the \pkg{fancyvrb} documentation for more information.
   \item[lastline (integer) (\meta{last line of input})]
   要显示的最后一行。

     The last line to be shown.
   \item[linenos (boolean) (false)]
   启用行号。
为了自定义行号的显示样式，您需要重新定义 |\theFancyVerbLine| 宏：
     Enables line numbers.
     In order to customize the display style of line numbers, you need to redefine the |\theFancyVerbLine| macro:

 \begin{example}
   \renewcommand{\theFancyVerbLine}{\sffamily
     \textcolor[rgb]{0.5,0.5,1.0}{\scriptsize
     \oldstylenums{\arabic{FancyVerbLine}}}}

   \begin{minted}[linenos,
     firstnumber=11]{python}
   def all(iterable):
       for i in iterable:
           if not i: 
               return False
       return True
   \end{minted}
 \end{example}

 \item[numberfirstline (boolean) (false)]
 始终对第一行进行编号，而不考虑 |stepnumber|。

 Always number the first line, regardless of |stepnumber|.


   \item[numbers (left \| right \| both \| none) (none)]
   与 |linenos| 基本相同，只不过可以指定行号显示在哪一侧。

     Essentially the same as |linenos|, except the side on which the numbers appear may be specified.
   \item[mathescape (boolean) (false)]
   在注释中启用 \LaTeX{} 数学模式。
使用方式与 \pkg{listings} 宏包相同。
关于数学模式和连字的注意事项，请参见 \texttt{escapeinside} 下面的说明。

     Enable \LaTeX{} math mode inside comments.
     Usage as in package \pkg{listings}.
     See the note under \texttt{escapeinside} regarding math and ligatures.
   \item[numberblanklines (boolean) (true)]
   启用或禁用空行的编号。

     Enables or disables numbering of blank lines.
   \item[numbersep (dimension) (12pt)]
   行号与代码起始位置之间的间隔。

     Gap between numbers and start of line.
   \item[obeytabs (boolean) (false)]
   将制表符视为制表符而不是将其转换为空格——也就是说，将其展开为由 |tabsize| 确定的制表符位置。
   \textcolor{DarkRed}{\textbf{尽管这样可以正确展开缩进中的制表符，但通常无法正确展开除空格或制表符之外的任何内容之前的制表符。在这些情况下应该避免使用。}}


     Treat tabs as tabs instead of converting them to spaces---that is, expand them to tab stops determined by |tabsize|.  \textcolor{DarkRed}{\textbf{While this will correctly expand tabs within leading indentation, usually it will not correctly expand tabs that are preceded by anything other than spaces or other tabs.  It should be avoided in those case.}}

   \item[outencoding (string) (\meta{system-specific})]
   设置 \app{Pygments} 用于突出显示输出的文件编码。
会覆盖之前通过 |encoding| 设置的任何编码。

     Sets the file encoding that \app{Pygments} uses for highlighted output.  Overrides any encoding previously set via |encoding|.
   \item[python3 (boolean) (false)] 
   指定是否应用 Python 3 的语法高亮。

   \appliesto{PythonConsoleLexer}
     Specifies whether Python 3 highlighting is applied.
   \item[resetmargins (boolean) (false)]
   在其他环境中重置左边距。

     Resets the left margin inside other environments.
   \item[rulecolor (color command) (black)]
   框架的颜色。

     The color of the frame.
   \item[samepage (boolean) (false)]
   强制整个代码清单出现在同一页上，即使它不能适合一页。

     Forces the whole listing to appear on the same page, even if it doesn't fit.
   \item[showspaces (boolean) (false)]
   启用可见空格：\verb*/visible spaces/。

     Enables visible spaces: \verb*/visible spaces/.
   \item[showtabs (boolean) (false)]
   启用可见制表符——只能与 |obeytabs| 结合使用。


     Enables visible tabs---only works in combination with |obeytabs|.


 \item[space (macro) (\string\textvisiblespace, \textvisiblespace)]
 重新定义可见空格字符。请注意，只有当 |showspaces=true| 时才会使用它。

 Redefine the visible space character.  Note that this is only used if |showspaces=true|.


 \item[spacecolor (string) (none)]
 设置可见空格的颜色。默认情况下（|none|），它们采用其周围内容的颜色。


 Set the color of visible spaces.  By default (|none|), they take the color of their surroundings.


   \item[startinline (boolean) (false)] \appliesto{PHP}
   指定代码从 PHP 模式开始，即省略了前导 |<?php|。

     Specifies that the code starts in PHP mode, i.e., leading |<?php| is omitted.
   \item[style] (string) (\meta{default})
   设置 \app{Pygments} 使用的样式表。


     Sets the stylesheet used by \app{Pygments}.
   \item[stepnumber (integer) (1)]
   行号出现的间隔。


     Interval at which line numbers appear.


 \item[stepnumberfromfirst (boolean) (false)]
 默认情况下，当使用行号并且 |stepnumber| $\neq$ 1 时，只包括 |stepnumber| 的倍数的行号。这会使行号从第一行偏移，因此第一行和它之后每隔 |stepnumber| 行的所有行都有行号。

 By default, when line numbering is used with |stepnumber| $\ne 1$, only line numbers that are a multiple of |stepnumber| are included.  This offsets the line numbering from the first line, so that the first line, and all lines separated from it by a multiple of |stepnumber|, are numbered.


 \item[stepnumberoffsetvalues (boolean) (false)]
 默认情况下，当使用行号并且 |stepnumber| $\neq$ 1 时，只包括 |stepnumber| 的倍数的行号。使用 |firstnumber| 偏移行号将更改哪些行具有行号以及哪行有哪个号码，但不会更改出现的\emph{行号}。此选项会导致忽略 |firstnumber| 来确定哪些行号是 |stepnumber| 的倍数。在计算实际显示的号码时仍然使用 |firstnumber|。因此，显示的行号将是 |stepnumber| 的倍数，再加上 |firstnumber| 减去 1。


 By default, when line numbering is used with |stepnumber| $\ne 1$, only line numbers that are a multiple of |stepnumber| are included.  Using |firstnumber| to offset the numbering will change which lines are numbered and which line gets which number, but will not change which \emph{numbers} appear.  This option causes |firstnumber| to be ignored in determining which line numbers are a multiple of |stepnumber|.  |firstnumber| is still used in calculating the actual numbers that appear.  As a result, the line numbers that appear will be a multiple of |stepnumber|, plus |firstnumber| minus 1.


   \item[stripall (boolean) (false)]
   从输入中剥离所有前导和尾随空格。


     Strip all leading and trailing whitespace from the input.
   \item[stripnl (boolean) (false)]
   从输入中剥离前导和尾随换行符。


     Strip leading and trailing newlines from the input.


 \item[tab (macro) ({\rmfamily\pkg{fancyvrb}'s} \string\FancyVerbTab, \FancyVerbTab)]
 重新定义可见制表符字符。请注意，仅当 |showtabs=true| 时才会使用此选项。|\rightarrowfill|，\hbox to 2em{\rightarrowfill}，可能是一个不错的替代方案。


 Redefine the visible tab character.  Note that this is only used if |showtabs=true|.  |\rightarrowfill|, \hbox to 2em{\rightarrowfill}, may be a nice alternative.


 \item[tabcolor (string) (black)]
 设置可见制表符的颜色。如果 |tabcolor=none|，制表符将采用其周围的颜色。对于缩进多行注释或字符串的制表符，通常不希望出现这种情况。


 Set the color of visible tabs.  If |tabcolor=none|, tabs take the color of their surroundings.  This is typically undesirable for tabs that indent multiline comments or strings.


   \item[tabsize (integer) (8)]
   制表符相当于的空格数。如果未激活 |obeytabs|，则制表符将转换为此数量的空格。如果激活了 |obeytabs|，则制表符停靠点之间将设置该数量的空格字符。


     The number of spaces a tab is equivalent to.  If |obeytabs| is \emph{not} active, tabs will be converted into this number of spaces.  If |obeytabs| is active, tab stops will be set this number of space characters apart.
   \item[texcl (boolean) (false)]
   启用注释中的 \LaTeX{} 代码。使用方式类似于 \pkg{listings} 宏包。请参见 \texttt{escapeinside} 下关于数学和连字的注释。


     Enables \LaTeX{} code inside comments.
     Usage as in package \pkg{listings}.  See the note under \texttt{escapeinside} regarding math and ligatures.
   \item[texcomments (boolean) (false)]
   启用注释中的 \LaTeX{} 代码。|texcl| 的较新名称。请参见 |escapeinside| 下关于数学和连字的注释。

     Enables \LaTeX{} code inside comments.  The newer name for |texcl|.  See the note under |escapeinside| regarding math and ligatures.

     关于\texttt{texcomments}，从Pygments 2.0.2开始，它在处理多行C/C++预处理器指令时失败，并且在某些其他情况下可能会失败。这是因为预处理器指令被标记为\href{http://pygments.org/docs/tokens/}{\texttt{Comment.Preproc}}，因此\texttt{texcomments}会将预处理器指令视为文字\LaTeX 代码。\href{https://bitbucket.org/birkenfeld/pygments-main/issue/1086/wrong-processing-of-in-c-c-macros-if-is}{在Pygments网站上已经有一个问题}；关于\href{https://github.com/gpoore/minted/issues/66}{\pkg{minted} GitHub网站}还有其他详细信息。



     As of Pygments 2.0.2, \texttt{texcomments} fails with multiline C/C++ preprocessor directives, and may fail in some other circumstances.  This is because preprocessor directives are \href{http://pygments.org/docs/tokens/}{tokenized as \texttt{Comment.Preproc}}, so \texttt{texcomments} causes preprocessor directives to be treated as literal \LaTeX\ code.  \href{https://bitbucket.org/birkenfeld/pygments-main/issue/1086/wrong-processing-of-in-c-c-macros-if-is}{An issue has been opened} at the Pygments site; additional details are also available on the \href{https://github.com/gpoore/minted/issues/66}{\pkg{minted} GitHub site}.
   \item[xleftmargin (dimension) (0)]
   列表之前要添加的缩进。

     Indentation to add before the listing.
   \item[xrightmargin (dimension) (0)]
   列表之后要添加的缩进。


     Indentation to add after the listing.

 \end{optionlist}
