以下是toCn.tex文档的内容：

环境的默认名称是\meta{language}|code|。
如果此名称与其他环境冲突，或者出于其他原因希望选择自己的名称，可以将其作为第一个参数指定：\cmd\newminted\oarg{环境名称}\marg{语言}\marg{选项}。

与普通的\pkg{minted}环境一样，使用|\newminted|创建的环境可以在其他环境定义中使用。由于\pkg{minted}使用\pkg{fancyvrb}内部实现的环境，因此基于它们的任何环境都必须包含\pkg{fancyvrb}命令|\VerbatimEnvironment|。这允许\pkg{fancyvrb}确定正在定义的环境的名称，并正确找到其结束。最好在定义的开始处包含此命令。例如，
\begin{Verbatim}
\newminted{cpp}{gobble=2,linenos}
\newenvironment{env}{\VerbatimEnvironment\begin{cppcode}}{\end{cppcode}}
\end{Verbatim}

\DescribeMacro{\newmint}
上述宏仅为|minted|环境定义了快捷方式。
主要原因是简短的命令形式|\mint|通常需要不同的选项-至少通常不会使用|gobble|选项。
使用\cmd\newmint\oarg{宏名称}\marg{语言}\marg{选项}定义|\mint|的快捷方式。
参数和用法与|\newminted|相同。
如果未指定\meta{宏名称}，则使用\meta{语言}。

\begin{example}
    \newmint{perl}{showspaces}

    \perl/my $foo = $bar;/
\end{example}


\DescribeMacro{\newmintinline}
这将创建\cmd\mintinline的自定义版本。语法与\cmd\newmint相同：\cmd\newmintinline\oarg{宏名称}\marg{语言}\marg{选项}。
如果未指定\meta{宏名称}，则创建的宏将被称为|\|\meta{语言}|inline|。

\begin{example}
    \newmintinline{perl}{showspaces}

    X\perlinline/my $foo = $bar;/X
\end{example}

\DescribeMacro{\newmintedfile}
这将创建\cmd\inputminted的自定义版本。语法为
\begin{center}
\cmd\newmintedfile\oarg{宏名称}\marg{语言}\marg{选项}
\end{center}
如果未指定\meta{宏名称}，则将使用|\|\meta{语言}|file|作为宏名称。