
\subsection{Package options\\宏包选项}

\DescribeMacro{chapter}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{可以在加载 \pkg{minted} 宏包时传递 |section| 或 |chapter| 选项，以控制 \LaTeX{} 如何计数 |listing| 浮动体。例如，以下命令将导致列表按章进行计数：}
\colchunk{To control how \LaTeX{} counts the |listing| floats, you can pass either the
|section| or |chapter| option when loading the \pkg{minted} package.
For example, the following will cause listings to be counted by chapter:}
\end{parcolumns}

\mint[frame=lines]{latex}/\usepackage[chapter]{minted}/

\DescribeMacro{cache=\meta{boolean} (default:~true)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{\pkg{minted} 通过将代码保存到临时文件，通过 \app{Pygments} 对代码进行高亮处理并将输出保存到另一个临时文件，然后将输出输入到 \LaTeX\ 文档中来工作。如果需要突出显示多个代码块，则这个过程可能会变得非常缓慢。为避免这种情况，该宏包提供了一个 |cache| 选项。默认情况下，此选项已启用。}
\colchunk{\pkg{minted} works by saving code to a temporary file, highlighting the code via \app{Pygments} and saving the output to another temporary file, and inputting the output into the \LaTeX\ document.  This process can become quite slow if there are several chunks of code to highlight.  To avoid this, the package provides a |cache| option.  This is on by default.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{选项 |cache| 在文档的根目录下创建一个名为}
\colchunk{The |cache| option creates a directory}
\end{parcolumns}

|_minted-|\meta{jobname}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{的目录（可以使用选项 |cachedir| 自定义此目录名）。\footnotemark 高亮代码文件存储在此目录中，以便将来无需再次高亮代码。在大多数情况下，缓存将显着加快文档的编译速度。}
\colchunk{in the document's root directory (this may be customized with the |cachedir| option).\footnotemark
Files of highlighted code are stored in this directory, so that the code will not have to be highlighted again in the future.  In most cases, caching will significantly speed up document compilation.}
\end{parcolumns}

\footnotetext{实际上，目录的名称使用“已消毒”的 \meta{jobname} 副本命名，其中空格和星号已替换为下划线，双引号已被剥离。如果文件名包含空格，则 \texttt{\string\jobname} 将包含一个带引号的名称，除了使用星号替换空格的旧版 MiKTeX 外。使用“已消毒”的 \meta{jobname} 比适应各种转义约定更简单。}
\footnotetext{The directory is actually named using a ``sanitized'' copy of \meta{jobname}, in which spaces and asterisks have been replaced by underscores, and double quotation marks have been stripped.  If the file name contains spaces, \texttt{\string\jobname} will contain a quote-wrapped name, except under older versions of MiKTeX which used the name with spaces replaced by asterisks.  Using a ``sanitized'' \meta{jobname} is simpler than accomodating the various escaping conventions.}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{不再使用的缓存文件将被自动删除。\footnotemark}
\colchunk{Cached files that are no longer in use are automatically deleted.\footnotemark}
\end{parcolumns}
\footnotetext{这取决于主辅助文件未被删除或损坏。如果发生这种情况，可以简单地删除缓存目录并重新开始。}
\footnotetext{This depends on the main auxiliary file not being deleted or becoming corrupted.  If that happens, you could simply delete the cache directory and start over.}


\DescribeMacro{cachedir=\meta{directory} (def:~\_minted-\meta{jobname})}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{这允许指定存储缓存文件的目录。路径应使用正斜杠，即使在 Windows 下也是如此。}
\colchunk{This allows the directory in which cached files are stored to be specified.  Paths should use forward slashes, even under Windows.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{必须转义特殊字符。例如，|cachedir=/mintedcache| 将无法工作，因为波浪号 || 将转换为非换行空格的 LaTeX 命令，而不是被直接处理。可以使用}
\colchunk{Special characters must be escaped.  For example, |cachedir=~/mintedcache| would not work because the tilde |~| would be converted into the \LaTeX\ commands for a non-breaking space, rather than being treated literally.  Instead, use }
\end{parcolumns}

|\string~/mintedcache|，|\detokenize{~/mintedcache}|

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{或等效的解决方案。}
\colchunk{or an equivalent solution.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{路径可以包含空格，但仅在整个 \meta{directory} 被大括号 |{}| 包裹并且空格被引用时。例如，}
\colchunk{Paths may contain spaces, but only if the entire \meta{directory} is wrapped in curly braces |{}|, and only if the spaces are quoted.  For example,}

\end{parcolumns}

\begin{Verbatim}
cachedir = {\detokenize{~/"minted cache"/"with spaces"}}
\end{Verbatim}

\begin{parcolumns}[rulebetween=false,colwidths={2=.6\linewidth}]{2}
\colchunk{请注意，如果指定了 |outputdir|，则缓存目录相对于其而言。}
\colchunk{Note that the cache directory is relative to the |outputdir|, if an |outputdir| is specified.}
\end{parcolumns}


\DescribeMacro{finalizecache=\meta{boolean} (default:~false)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{在某些情况下，可能希望在不允许 |-shell-escape| 的环境中使用 \pkg{minted}。文档可能会被提交给出版商或预印本服务器，或者与不支持 |-shell-escape| 的在线服务一起使用。只要不需要修改 \pkg{minted} 的内容，就可以这样做。}
\colchunk{In some cases, it may be desirable to use \pkg{minted} in an environment in which |-shell-escape| is not allowed.  A document might be submitted to a publisher or preprint server or used with an online service that does not support |-shell-escape|.  This is possible as long as \pkg{minted} content does not need to be modified.}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{使用 |finalizecache| 选项进行编译会为在没有 |-shell-escape| 的环境中使用准备缓存。\footnotemark
完成后，可以将 |finalizecache| 选项替换为 |frozencache| 选项，以后可以在不需要 |-shell-escape| 的情况下使用冻结（静态）缓存。}
\colchunk{Compiling with the |finalizecache| option prepares the cache for use in an environment without |-shell-escape|.\footnotemark
Once this has been done, the |finalizecache| option may be swapped for the |frozencache| option, which will then use the frozen (static) cache in the future, without needing |-shell-escape|.}
\end{parcolumns}
\footnotetext{通常，缓存文件使用突出显示设置和突出显示文本的 MD5 哈希命名。 \texttt{finalizecache} 使用 \texttt{listing<number>.pygtex} 方案重命名缓存文件。这使得匹配文档内容和缓存文件更加简单，也是必要的，因为在 TeX Live 2016 之前，XeTeX 引擎缺乏 pdfTeX 和 LuaTeX 具有的内置 MD5 能力。}
\footnotetext{Ordinarily, cache files are named using an MD5 hash of highlighting settings and highlighted text.  \texttt{finalizecache} renames cache files using a \texttt{listing<number>.pygtex} scheme.  This makes it simpler to match up document content and cache files, and is also necessary for the XeTeX engine since prior to TeX Live 2016 it lacked the built-in MD5 capabilities that pdfTeX and LuaTeX have.}



\DescribeMacro{fontencoding=\meta{encoding} (default:~\meta{doc~encoding})}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{设置用于排版代码的字体编码。}
\colchunk{Set font encoding used for typesetting code.}

\colplacechunks
\colchunk{例如，|fontencoding=T1|。}
\colchunk{For example, |fontencoding=T1|.}
\end{parcolumns}

 \DescribeMacro{frozencache=\meta{boolean} (default:~false)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{使用使用 |finalizecache| 选项创建的冻结（静态）缓存。打开 |frozencache| 时，不需要 |-shell-escape|，也不需要 Python 和 Pygments。此外，通过 |\inputminted| 访问的任何外部文件都不再需要。}
\colchunk{Use a frozen (static) cache created with the |finalizecache| option.  When |frozencache| is on, |-shell-escape| is not needed, and Python and Pygments are not required.  In addition, any external files accessed through |\inputminted| are no longer necessary.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.5\linewidth}]{2}
\colchunk{\textbf{必须谨慎使用此选项。文档在 \pkg{minted} 考虑的范围内必须处于最终形式，并且在打开 \texttt{frozencache} 之前必须使用 \texttt{finalizecache} 进行编译。打开此选项后，除非直接编辑缓存文件，否则无法修改 \pkg{minted} 内容。无法更改需要 Pygments 或 Python 的任何 \pkg{minted} 设置。如果在打开 \texttt{frozencache} 后不正确地修改了 \pkg{minted} 内容，则 \pkg{minted} 无法检测到修改。}}
\colchunk{\textbf{This option must be used with care.  A document \emph{must} be in final form, as far as \pkg{minted} is concerned, \emph{before} \texttt{frozencache} is turned on, and the document \emph{must} have been compiled with \texttt{finalizecache}.   When this option is on, \pkg{minted} content cannot be modified, except by editing the cache files directly.  Changing any \pkg{minted} settings that require Pygments or Python is not possible.  If \pkg{minted} content is incorrectly modified after \texttt{frozencache} is turned on, \pkg{minted} \emph{cannot} detect the modification.}}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{如果正在使用 |frozencache|，并且要验证 \pkg{minted} 设置或内容是否未被以无效的方式修改，则可以使用以下过程测试缓存。}
\colchunk{If you are using |frozencache|, and want to verify that \pkg{minted} settings or content have not been modified in an invalid fashion, you can test the cache using the following procedure.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{%
\begin{enumerate}
\item 获取使用 |frozencache| 的缓存的副本。
\item 在支持 |-shell-escape| 的环境中使用 |finalizecache=true| 和 |frozencache=false| 编译文档。这本质上重新生成了冻结（静态）缓存。
\item 将原始缓存与新生成的缓存进行比较。在 Linux 和 OS X 下，可以使用 |diff|；在 Windows 下，可能需要使用 |fc|。如果 \pkg{minted} 内容和设置未以无效的方式进行修改，则所有文件都将相同（假设两个缓存都使用兼容的Pygments版本）。
\end{enumerate}
}
\colchunk{%
\begin{enumerate}
\item Obtain a copy of the cache used with |frozencache|.
\item Compile the document in an environment that supports |-shell-escape|, with |finalizecache=true| and |frozencache=false|.  This essentially regenerates the frozen (static) cache.
\item Compare the original cache with the newly generated cache.  Under Linux and OS X, you could use |diff|; under Windows, you probably want |fc|.  If \pkg{minted} content and settings have not been modified in an invalid fashion, all files will be identical (assuming that compatible versions of Pygments are used for both caches).
\end{enumerate}
}
\end{parcolumns}

\DescribeMacro{draft=\meta{boolean} (default:~false)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{这仅使用\pkg{fancyvrb}进行所有排版；不使用\app{Pygments}。这是以交换语法高亮和一些其他\app{minted}功能为代价的，但编译速度更快。性能应与直接使用\pkg{fancyvrb}时基本相同；不使用外部临时文件。请注意，如果您在编译之间没有更改太多的代码，则缓存模式和草稿模式之间的性能差异可能很小。还请注意，草稿设置通常从文档类继承。}
\colchunk{This uses \pkg{fancyvrb} alone for all typesetting; \app{Pygments} is not used.  This trades syntax highlighting and some other \app{minted} features for faster compiling.  Performance should be essentially the same as using \pkg{fancyvrb} directly; no external temporary files are used.  Note that if you are not changing much code between compiles, the difference in performance between caching and draft mode may be minimal.  Also note that |draft| settings are typically inherited from the document class.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{草稿模式不支持|autogobble|。在草稿模式下，常规的|gobble|，|linenos|和大多数与语法高亮无关的选项仍将正常运行。}
\colchunk{Draft mode does not support |autogobble|.  Regular |gobble|, |linenos|, and most other options not related to syntax highlighting will still function in draft mode.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{通常可以在草稿模式下编译文档而无需使用shell escape。 \pkg{ifplatform}包可能会发出关于由于禁用了shell escape而导致功能有限的警告，但在几乎所有情况下都可以忽略此警告。 （仅当您的系统配置不寻常，使得|\ifwindows|宏必须借助shell escape来确定系统时，才真正需要shell escape。有关详细信息，请参见\pkg{ifplatform}文档。）}
\colchunk{Documents can usually be compiled without shell escape in draft mode.  The \pkg{ifplatform} package may issue a warning about limited functionality due to shell escape being disabled, but this may be ignored in almost all cases.  (Shell escape is only really required if you have an unusual system configuration such that the |\ifwindows| macro must fall back to using shell escape to determine the system.  See the \pkg{ifplatform} documentation for more details:  \url{http://www.ctan.org/pkg/ifplatform}.)}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{如果设置了|cache|选项，则在草稿模式下保留所有现有缓存文件。这允许在不需要每次完全重建缓存的情况下间歇性地使用缓存模式和草稿模式。一旦关闭草稿模式，未使用的缓存文件的自动清理将恢复。 （这假设辅助文件在此期间未被删除；它包含缓存历史记录，并允许自动清理未使用的文件。）}
\colchunk{If the |cache| option is set, then all existing cache files will be kept while draft mode is on.  This allows caching to be used intermitently with draft mode without requiring that the cache be completely recreated each time.  Automatic cleanup of cached files will resume as soon as draft mode is turned off.  (This assumes that the auxiliary file has not been deleted in the meantime; it contains the cache history and allows automatic cleanup of unused files.)}
\end{parcolumns}



\DescribeMacro{final=\meta{boolean} (default:~true)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{这是|draft|的相反；它等效于|draft=false|。\\同样，请注意，|draft|和|final|设置通常从文档类继承。}
\colchunk{This is the opposite of |draft|; it is equivalent to |draft=false|.  Again, note that |draft| and |final| settings are typically inherited from the document class.}
\end{parcolumns}


\DescribeMacro{kpsewhich=\meta{boolean} (default:~false)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{这个选项使用 |kpsewhich| 来定位需要突出显示的文件。一些构建工具（如 |texi2pdf|）通过修改 |TEXINPUTS| 来实现功能；在某些情况下，用户也可以自定义 |TEXINPUTS|。|kpsewhich| 选项允许 \pkg{minted} 与这些配置一起工作。}
\colchunk{This option uses |kpsewhich| to locate files that are to be highlighted.  Some build tools such as |texi2pdf| function by modifying |TEXINPUTS|; in some cases, users may customize |TEXINPUTS| as well.  The |kpsewhich| option allows \pkg{minted} to work with such configurations.}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{该选项可能会在某些系统或某些系统配置下增加明显的开销。}
\colchunk{This option may add a noticeable amount of overhead on some systems, or with some system configurations.}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{该选项\emph{不}使得 \pkg{minted} 与 \LaTeX 的 |-output-directory| 和 |-aux-directory| 命令行选项一起工作。对于这些选项，请参见 |outputdir| 包选项。}
\colchunk{This option does \emph{not} make \pkg{minted} work with the |-output-directory| and |-aux-directory| command-line options for \LaTeX.  For those, see the |outputdir| package option.}
\end{parcolumns}



 \DescribeMacro{langlinenos=\meta{boolean} (default:~false)}
 \vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{\pkg{minted} 在后台使用 \pkg{fancyvrb} 宏包进行代码排版。 \pkg{fancyvrb} 提供了一个选项 |firstnumber|，允许指定环境的起始行号。为了方便起见，还有一个选项 |firstnumber=last|，允许行号从上一个环境结束的地方继续。|langlinenos| 选项使得 |firstnumber| 可以对每个语言进行单独设置，对于所有 |minted| 和 |\mint| 的使用情况。例如，考虑以下代码和输出。}
\colchunk{\pkg{minted} uses the \pkg{fancyvrb} package behind the scenes for the code typesetting.  \pkg{fancyvrb} provides an option |firstnumber| that allows the starting line number of an environment to be specified.  For convenience, there is an option |firstnumber=last| that allows line numbering to pick up where it left off.  The |langlinenos| option makes |firstnumber| work for each language individually with all |minted| and |\mint| usages.  For example, consider the code and output below.}
\end{parcolumns}


 \begin{VerbatimOut}[gobble=1]{minted.doc.out}
   \begin{minted}[linenos]{python}
   def f(x):
       return x**2
   \end{minted}

   \begin{minted}[linenos]{ruby}
   def func
       puts "message"
   end
   \end{minted}

   \begin{minted}[linenos, firstnumber=last]{python}
   def g(x):
       return 2*x
   \end{minted}
 \end{VerbatimOut}
 \inputminted[frame=single, rulecolor=minted@linkcolor]{latex}{minted.doc.out}
 \hfill
 \colorbox{minted@samplebg}{\begin{minipage}{0.6\textwidth}
   \input{minted.doc.out}
 \end{minipage}}
 \hfill\hfill

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{如果没有使用 |langlinenos| 选项，则第二个 Python 环境中的行号将不会从第一个 Python 环境结束的地方开始编号，而是从 Ruby 的行号开始。}
\colchunk{Without the |langlinenos| option, the line numbering in the second Python environment would not pick up where the first Python environment left off.  Rather, it would pick up with the Ruby line numbering.}
\end{parcolumns}



\DescribeMacro{newfloat=\meta{boolean} (default:~false)}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{默认情况下，|listing| 环境使用 \pkg{float} 宏包创建。|newfloat| 选项使用 \pkg{newfloat} 来创建该环境，这可以更好地与 \pkg{caption} 宏包集成。}
\colchunk{By default, the |listing| environment is created using the \pkg{float} package.  The |newfloat| option creates the environment using \pkg{newfloat} instead.  This provides better integration with the \pkg{caption} package.}
\end{parcolumns}



\DescribeMacro{outputdir=\meta{directory} (default:~\meta{none})}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{对于\LaTeX{}中的 |-output-directory| 和 |-aux-directory|（MiKTeX）命令行选项，对于\pkg{minted}会造成问题，因为\pkg{minted}的临时文件保存在 |<outputdir>| 中，但\pkg{minted}仍会在文档根目录中查找它们。无法访问命令行选项的值，以便\pkg{minted}可以自动查找正确的位置。但是，可以将输出目录手动指定为包选项。}
\colchunk{The |-output-directory| and |-aux-directory| (MiKTeX) command-line options for \LaTeX\ cause problems for \pkg{minted}, because the \pkg{minted} temporary files are saved in |<outputdir>|, but \pkg{minted} still looks for them in the document root directory.  There is no way to access the value of the command-line option so that \pkg{minted} can automatically look in the right place.  But it is possible to allow the output directory to be specified manually as a package option.}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{应使用绝对路径或相对于文档根目录的路径来指定输出目录。路径应使用正斜杠，即使在Windows下也是如此。必须转义特殊字符，而空格则需要用引号引起来，并需要用大括号|{}|将整个\meta{directory}包装起来。有关转义和引用的示例，请参见上面的|cachedir|。}
\colchunk{The output directory should be specified using an absolute path or a path relative to the document root directory.  Paths should use forward slashes, even under Windows.  Special characters must be escaped, while spaces require quoting and need the entire \meta{directory} to be wrapped in curly braces |{}|.  See |cachedir| above for examples of escaping and quoting.}
\end{parcolumns}



\DescribeMacro{section}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{要控制\LaTeX{}如何计数|listing|浮动对象，可以在加载\pkg{minted}包时传递|section|或|chapter|选项。}
\colchunk{To control how \LaTeX{} counts the |listing| floats, you can pass either the
|section| or |chapter| option when loading the \pkg{minted} package.}
\end{parcolumns}

\subsection{Macro option usage\\宏选项用法}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{所有\pkg{minted}高亮命令都接受相同的选项集。选项指定为逗号分隔的|key=value|对的列表。例如，我们可以指定行应编号：}
\colchunk{All \pkg{minted} highlighting commands accept the same set of options.
Options are specified as a comma-separated list of |key=value| pairs.
For example, we can specify that the lines should be numbered:}
\end{parcolumns}


% \begin{example}
%   \begin{minted}[linenos=true]{c++}
%   #include <iostream>
%   int main() {
%       std::cout << "Hello "
%                 << "world"
%                 << std::endl;
%   }
%   \end{minted}
% \end{example}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{选项值|true|也可以完全省略（包括“|=|”）。要进一步自定义行号的显示，请覆盖|\theFancyVerbLine|命令。有关详细信息，请参阅\pkg{fancyvrb}文档。}
\colchunk{An option value of |true| may also be omitted entirely (including the ``|=|'').
To customize the display of the line numbers further, override the |\theFancyVerbLine| command.
Consult the \pkg{fancyvrb} documentation for details.}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{|\mint|接受相同的选项：}
\colchunk{|\mint| accepts the same options:}
\end{parcolumns}
 

\begin{example}
\mint[linenos]{perl}|$x=~/foo/|
\end{example}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{这里是另一个示例：我们想在注释中使用\LaTeX{}数学模式：}
\colchunk{Here's another example: we want to use the \LaTeX{} math mode inside comments:}
\end{parcolumns}

% \begin{example}
%   \begin{minted}[mathescape]{python}
%   # Returns $\sum_{i=1}^{n}i$
%   def sum_from_one_to(n):
%       r = range(1, n + 1)
%       return sum(r)
%   \end{minted}
% \end{example}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{为了使您的\LaTeX{}代码更易于阅读，您可能希望在|minted|环境中缩进代码。选项|gobble|从输出中删除这些不必要的空白字符。还有一个|autogobble|选项，它会自动检测这个空格的长度。}
\colchunk{To make your \LaTeX{} code more readable you might want to indent the code inside a |minted|
environment.
The option |gobble| removes these unnecessary whitespace characters from the output.  There is also an |autogobble| option that detects the length of this whitespace automatically.}
\end{parcolumns}


 \begin{example}
   \begin{minted}[gobble=2,
     showspaces]{python}
     def boring(args = None):
         pass
   \end{minted}

   versus

   \begin{minted}[showspaces]{python}
     def boring(args = None):
         pass
   \end{minted}
 \end{example}

 \DescribeMacro{\setminted}
\vspace*{-\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{您可能希望为整个文档或整个语言设置选项。这可以通过使用命令\cmd\setminted\oarg{language}\marg{key=value,...}实现。特定于语言的选项会覆盖文档范围内的选项。个别命令和环境选项会覆盖特定于语言的选项。}
\colchunk{You may wish to set options for the document as a whole, or for an entire language.  This is possible via \cmd\setminted\oarg{language}\marg{key=value,...}.  Language-specific options override document-wide options.  Individual command and environment options override language-specific options.}
\end{parcolumns}

 

 \DescribeMacro{\setmintedinline}
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{您可能希望为\cmd\mintinline 单独设置选项，无论是为整个文档还是为特定语言。这可以通过使用命令\cmd\setmintedinline 实现。语法如下：

\cmd\setmintedinline\oarg{language}\marg{key=value,...}}
\colchunk{You may wish to set separate options for \cmd\mintinline, either for the document as a whole or for a specific language.  This is possible via \cmd\setmintedinline.  The syntax is}
\end{parcolumns}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{特定于语言的选项会覆盖文档范围内的选项。个别命令选项会覆盖特定于语言的选项。所有使用\cmd\setmintedinline\ 指定的设置都会覆盖使用\cmd\setminted\ 指定的设置。也就是说，内联设置的优先级始终高于一般设置。}
\colchunk{Language-specific options override document-wide options. Individual command options override language-specific options.  All settings specified with \cmd\setmintedinline\ override those set with \cmd\setminted.  That is, inline settings always have a higher precedence than general settings.}
\end{parcolumns}


 \subsection{Available options\\可用选项}

 \newcommand\appliesto[1]{\textsf{[For #1 only]}}

\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{以下是可用选项的完整列表。有关更详细的选项描述，请参阅\pkg{fancyvrb}和\app{Pygments}文档。}
\colchunk{Following is a full list of available options.
For more detailed option descriptions please refer to the \pkg{fancyvrb} and \app{Pygments} documentation.}
\end{parcolumns}


 
 \begin{optionlist}
   \item[autogobble (boolean) (false)]
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\vspace*{-2\parskip}
\colchunk{从代码中删除（gobble）所有常见的前导空格。基本上是自动确定要删除什么的 |gobble| 的版本。适用于最初未缩进但在粘贴到\LaTeX\ 文档后手动缩进的代码。}
\colchunk{Remove (gobble) all common leading whitespace from code.  Essentially a version of |gobble| that automatically determines what should be removed.  Good for code that originally is not indented, but is manually indented after being pasted into a \LaTeX\ document.}
\end{parcolumns}

 \begin{example}
   ...text.
   \begin{minted}[autogobble]{python}
       def f(x):
           return x**2
   \end{minted}
 \end{example}

   \item[baselinestretch (dimension) (\meta{document default})]
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{用于代码列表内部的行距的值。}
\colchunk{Value to use as for baselinestretch inside the listing.}
\end{parcolumns}
     


 \item[beameroverlays (boolean) (false)]
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{在使用 |escapeinside| 和 |texcomments| 时，为 |<| 和 |>| 字符提供其正常的文本含义，以便形式为 |\only<1>{...}| 的\pkg{beamer}叠加效果正常工作。}
\colchunk{Give the |<| and |>| characters their normal text meanings when used with |escapeinside| and |texcomments|, so that \pkg{beamer} overlays of the form |\only<1>{...}| will work.}
\end{parcolumns}



\item[breakafter (string) (\meta{none})]
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{（当\texttt{breaklines=true}时）在指定的字符后换行，而不仅仅在空格处换行。不适用于 |\mintinline|。}
\colchunk{Break lines after specified characters, not just at spaces, when \texttt{breaklines=true}.  Does not apply to |\mintinline|.}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{例如，\texttt{breakafter=-/} 允许在连字符或斜杠后面断行。 \texttt{breakafter} 中给定的特殊字符应进行反斜杠转义（通常为 \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}；通过 \texttt{\textbackslash\textbackslash} 可以获得反斜杠 \texttt{\textbackslash}）。}
\colchunk{For example, \texttt{breakafter=-/} would allow breaks after any hyphens or slashes.  Special characters given to \texttt{breakafter} should be backslash-escaped (usually \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}; the backslash \texttt{\textbackslash} may be obtained via \texttt{\textbackslash\textbackslash}).}
\end{parcolumns}


\begin{parcolumns}[rulebetween=false,colwidths={2=.5\linewidth}]{2}
\colchunk{另一种选择，请参见 \texttt{breakbefore}。当为相同字符使用 \texttt{breakbefore} 和 \texttt{breakafter} 时，\texttt{breakbeforegroup} 和 \texttt{breakaftergroup} 必须具有相同的设置。}
\colchunk{For an alternative, see \texttt{breakbefore}.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.}
\end{parcolumns}


 \begin{longexample}
   \begin{minted}[breaklines, breakafter=d]{python}
   some_string = 'SomeTextThatGoesOnAndOnForSoLongThatItCouldNeverFitOnOneLine'
   \end{minted}
 \end{longexample}

   \item[breakaftergroup] (boolean) (true)
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.5\linewidth}]{2}
\colchunk{当使用 \texttt{breakafter} 时，将所有相邻的相同字符分组在一起，并仅在最后一个字符后允许断行。当为相同字符使用 \texttt{breakbefore} 和 \texttt{breakafter} 时，\texttt{breakbeforegroup} 和 \texttt{breakaftergroup} 必须具有相同的设置。}
\colchunk{When \texttt{breakafter} is used, group all adjacent identical characters together, and only allow a break after the last character.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.}
\end{parcolumns}


   \item[breakaftersymbolpre (string) (\string\,\string\footnotesize\string\ensuremath\{\_\string\rfloor\}, \,\footnotesize\ensuremath{_\rfloor})]
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{在由 \texttt{breakafter} 插入的换行符前插入的符号。}
\colchunk{The symbol inserted pre-break for breaks inserted by \texttt{breakafter}.}
\end{parcolumns}
     

   \item[breakaftersymbolpost (string) (\meta{none})]
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{在由 \texttt{breakafter} 插入的换行符后插入的符号。}
\colchunk{The symbol inserted post-break for breaks inserted by \texttt{breakafter}.}
\end{parcolumns}
     

   \item[breakanywhere (boolean) (false)]
\vspace*{-2\parskip}
\begin{parcolumns}[rulebetween=false,colwidths={2=.55\linewidth}]{2}
\colchunk{在 \texttt{breaklines = true} 时，不仅在空格处，而是在任何位置断行。不适用于 |\mintinline|。}
\colchunk{Break lines anywhere, not just at spaces, when \texttt{breaklines=true}.  Does not apply to |\mintinline|.}
\end{parcolumns}


 \begingroup
 \fvset{xrightmargin=1em}
 \begin{longexample}
   \begin{minted}[breaklines, breakanywhere]{python}
   some_string = 'SomeTextThatGoesOnAndOnForSoLongThatItCouldNeverFitOnOneLine'
   \end{minted}
 \end{longexample}
 \endgroup

   \item[breakanywheresymbolpre (string) (\string\,\string\footnotesize\string\ensuremath\{\_\string\rfloor\}, \,\footnotesize\ensuremath{_\rfloor})]
     The symbol inserted pre-break for breaks inserted by \texttt{breakanywhere}.

   \item[breakanywheresymbolpost (string) (\meta{none})]
     The symbol inserted post-break for breaks inserted by \texttt{breakanywhere}.

   \item[breakautoindent (boolean) (true)]
     When a line is broken, automatically indent the continuation lines to the indentation level of the first line.  When \texttt{breakautoindent} and \texttt{breakindent} are used together, the indentations add.  This  indentation is combined with \texttt{breaksymbolindentleft} to give the total actual left indentation.  Does not apply to \texttt{\string\mintinline}.

   \item[breakbefore (string) (\meta{none})]
     Break lines before specified characters, not just at spaces, when \texttt{breaklines=true}.  Does not apply to |\mintinline|.

 For example, \texttt{breakbefore=A} would allow breaks before capital A's.  Special characters given to \texttt{breakbefore} should be backslash-escaped (usually \texttt{\hashchar}, \texttt{\{}, \texttt{\}}, \texttt{\%}, \texttt{[}, \texttt{]}; the backslash \texttt{\textbackslash} may be obtained via \texttt{\textbackslash\textbackslash}).

  For an alternative, see \texttt{breakafter}.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.

 \begin{longexample}
   \begin{minted}[breaklines, breakbefore=A]{python}
   some_string = 'SomeTextThatGoesOnAndOnForSoLongThatItCouldNeverFitOnOneLine'
   \end{minted}
 \end{longexample}

   \item[breakbeforegroup] (boolean) (true)
     When \texttt{breakbefore} is used, group all adjacent identical characters together, and only allow a break before the first character.  When \texttt{breakbefore} and \texttt{breakafter} are used for the same character, \texttt{breakbeforegroup} and \texttt{breakaftergroup} must both have the same setting.

   \item[breakbeforesymbolpre (string) (\string\,\string\footnotesize\string\ensuremath\{\_\string\rfloor\}, \,\footnotesize\ensuremath{_\rfloor})]
     The symbol inserted pre-break for breaks inserted by \texttt{breakbefore}.

   \item[breakbeforesymbolpost (string) (\meta{none})]
     The symbol inserted post-break for breaks inserted by \texttt{breakbefore}.

   \item[breakbytoken (boolean) (false)]
   Only break lines at locations that are not within tokens; prevent tokens from being split by line breaks.  By default, \texttt{breaklines} causes line breaking at the space nearest the margin.  While this minimizes the number of line breaks that are necessary, it can be inconvenient if a break occurs in the middle of a string or similar token.

   This is not compatible with \texttt{draft} mode.  A complete list of Pygments tokens is available at \url{http://pygments.org/docs/tokens/}.  If the breaks provided by \texttt{breakbytoken} occur in unexpected locations, it may indicate a bug or shortcoming in the Pygments lexer for the language.

   \item[breakbytokenanywhere (boolean) (false)] 
   Like \texttt{breakbytoken}, but also allows line breaks between immediately adjacent tokens, not just between tokens that are separated by spaces.  Using \texttt{breakbytokenanywhere} with \texttt{breakanywhere} is redundant.

 \item[breakindent (dimension) (\meta{breakindentnchars})]
 When a line is broken, indent the continuation lines by this amount.  When |breakautoindent| and |breakindent| are used together, the indentations add.  This  indentation is combined with |breaksymbolindentleft| to give the total actual left indentation.

 Does not apply to \texttt{\string\mintinline}.

 \item[breakindentnchars (integer) (0)]
 This allows |breakindent| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).

   \item[breaklines (boolean) (false)] 
     Automatically break long lines in \texttt{minted} environments and \texttt{\string\mint} commands, and wrap longer lines in \texttt{\string\mintinline}.

 By default, automatic breaks occur at space characters.  Use \texttt{breakanywhere} to enable breaking anywhere; use \texttt{breakbytoken}, \texttt{breakbytokenanywhere}, \texttt{breakbefore}, and \texttt{breakafter} for more fine-tuned breaking.  Currently, only \texttt{breakbytoken} and \texttt{breakbytokenanywhere} work with |\mintinline|.  Using \texttt{escapeinside} to escape to \LaTeX\ and then insert a manual break is also an option.  For example, use \texttt{escapeinside=||}, and then insert \texttt{|\textbackslash\textbackslash|} at the appropriate point.  (Note that \texttt{escapeinside} does not work within strings.)

 \begin{example}
   ...text.
   \begin{minted}[breaklines]{python}
   def f(x):
       return 'Some text ' + str(x)
   \end{minted}
 \end{example}

     Breaking in \texttt{minted} and \texttt{\string\mint} may be customized in several ways.  To customize the indentation of broken lines, see \texttt{breakindent} and \texttt{breakautoindent}.  To customize the line continuation symbols, use \texttt{breaksymbolleft} and \texttt{breaksymbolright}.  To customize the separation between the continuation symbols and the code, use \texttt{breaksymbolsepleft} and \texttt{breaksymbolsepright}.  To customize the extra indentation that is supplied to make room for the break symbols, use \texttt{breaksymbolindentleft} and \texttt{breaksymbolindentright}.  Since only the left-hand symbol is used by default, it may also be modified using the alias options \texttt{breaksymbol}, \texttt{breaksymbolsep}, and \texttt{breaksymbolindent}.  Note than none of these options applies to \texttt{\string\mintinline}, since they are not relevant in the inline context.

 An example using these options to customize the \texttt{minted} environment is shown below.  This uses the \texttt{\string\carriagereturn} symbol from the \pkg{dingbat} package.

 \begingroup
 \fvset{breaklines, xleftmargin=2em, xrightmargin=2em}
 \begin{longexample}
   \begin{minted}[breaklines,
                  breakautoindent=false,
                  breaksymbolleft=\raisebox{0.8ex}{
                    \small\reflectbox{\carriagereturn}},
                  breaksymbolindentleft=0pt,
                  breaksymbolsepleft=0pt,
                  breaksymbolright=\small\carriagereturn,
                  breaksymbolindentright=0pt,
                  breaksymbolsepright=0pt]{python}
   def f(x):
       return 'Some text ' + str(x) + ' some more text ' + str(x) + ' even more text that goes on for a while'
   \end{minted}
 \end{longexample}
 \endgroup

     Automatic line breaks are limited with \app{Pygments} styles that use a colored background behind large chunks of text.  This coloring is accomplished with \texttt{\string\colorbox}, which cannot break across lines.  It may be possible to create an alternative to \texttt{\string\colorbox} that supports line breaks, perhaps with \pkg{TikZ}, but the author is unaware of a satisfactory solution.  The only current alternative is to redefine \texttt{\string\colorbox} so that it does nothing.  For example,
\begin{Verbatim}
\AtBeginEnvironment{minted}{\renewcommand{\colorbox}[3][]{#3}}
\end{Verbatim}
     uses the \pkg{etoolbox} package to redefine \texttt{\string\colorbox} within all \texttt{minted} environments.

     Automatic line breaks will not work with \texttt{showspaces=true} unless you use \texttt{breakanywhere} or \texttt{breakafter=\string\space}.

   \item[breaksymbol (string) (breaksymbolleft)]
     Alias for \texttt{breaksymbolleft}.

   \item[breaksymbolleft (string) (\string\tiny\string\ensuremath\{\string\hookrightarrow\}, {\tiny\ensuremath{\hookrightarrow}})]
     The symbol used at the beginning (left) of continuation lines when \texttt{breaklines=true}.  To have no symbol, simply set \texttt{breaksymbolleft} to an empty string (``\texttt{=,}'' or ``\texttt{=\{\}}'').  The symbol is wrapped within curly braces \texttt{\{\}} when used, so there is no danger of formatting commands such as \texttt{\string\tiny} ``escaping.''

     The \texttt{\string\hookrightarrow} and \texttt{\string\hookleftarrow} may be further customized by the use of the \texttt{\string\rotatebox} command provided by \pkg{graphicx}.  Additional arrow-type symbols that may be useful are available in the \pkg{dingbat} (\texttt{\string\carriagereturn}) and \pkg{mnsymbol} (hook and curve arrows) packages, among others.

     Does not apply to \texttt{\string\mintinline}.

   \item[breaksymbolright (string) (\meta{none})]
     The symbol used at breaks (right) when \texttt{breaklines=true}. Does not appear at the end of the very last segment of a broken line.


 \item[breaksymbolindent (dimension) (\meta{breaksymbolindentleftnchars})]
 Alias for |breaksymbolindentleft|.

 \item[breaksymbolindentnchars (integer) (\meta{breaksymbolindentleftnchars})]
 Alias for |breaksymbolindentleftnchars|.


 \item[breaksymbolindentleft (dimension) (\meta{breaksymbolindentleftnchars})]
 The extra left indentation that is provided to make room for |breaksymbolleft|.  This indentation is only applied when there is a |breaksymbolleft|.

     Does not apply to \texttt{\string\mintinline}.

 \item[breaksymbolindentleftnchars (integer) (4)]
 This allows |breaksymbolindentleft| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).

 \item[breaksymbolindentright (dimension) (\meta{breaksymbolindentrightnchars})]
 The extra right indentation that is provided to make room for |breaksymbolright|.  This indentation is only applied when there is a |breaksymbolright|.

 \item[breaksymbolindentrightnchars (integer) (4)]
 This allows |breaksymbolindentright| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).


 \item[breaksymbolsep (dimension) (\meta{breaksymbolsepleftnchars})]
 Alias for |breaksymbolsepleft|.

 \item[breaksymbolsepnchars (integer) (\meta{breaksymbolsepleftnchars})]
 Alias for |breaksymbolsepleftnchars|.


 \item[breaksymbolsepleft (dimension) (\meta{breaksymbolsepleftnchars})]
 The separation between the |breaksymbolleft| and the adjacent text. 

 \item[breaksymbolsepleftnchars (integer) (2)]
 Allows |breaksymbolsepleft| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).


 \item[breaksymbolsepright (dimension) (\meta{breaksymbolseprightnchars})]
 The \emph{minimum} separation between the |breaksymbolright| and the adjacent text.  This is the separation between |breaksymbolright| and the furthest extent to which adjacent text could reach.  In practice, |\linewidth| will typically not be an exact integer multiple of the character width (assuming a fixed-width font), so the actual separation between the |breaksymbolright| and adjacent text will generally be larger than |breaksymbolsepright|.  This ensures that break symbols have the same spacing from the margins on both left and right.  If the same spacing from text is desired instead, |breaksymbolsepright| may be adjusted.  (See the definition of |\FV@makeLineNumber| in \pkg{fvextra} for implementation details.)

 \item[breaksymbolseprightnchars (integer) (2)]
 Allows |breaksymbolsepright| to be specified as an integer number of characters rather than as a dimension (assumes a fixed-width font).


   \item[bgcolor (string) (\meta{none})]
     Background color of the listing.  Be aware that this option has several limitations (described below); see ``Framing alternatives'' below for more powerful alternatives.

     The value of this option must \emph{not} be a color command. Instead, it must be a color \emph{name}, given as a string, of a previously-defined color:

 \begin{example}
   \definecolor{bg}{rgb}{0.95,0.95,0.95}
   \begin{minted}[bgcolor=bg]{php}
   <?php
     echo "Hello, $x";
   ?>
   \end{minted}
 \end{example}

 This option puts \texttt{minted} environments and \texttt{\string\mint} commands in a \texttt{snugshade*} environment from the \pkg{framed} package, which supports breaks across pages.  (Prior to \pkg{minted} 2.2, a \texttt{minipage} was used, which prevented page breaks and gave undesirable spacing from surrounding text.)  Be aware that if \texttt{bgcolor} is used with \texttt{breaklines=true}, and a line break occurs just before a page break, then text may extend below the colored background in some instances.  It is best to use a more advanced framing package in those cases; see ``Framing alternatives'' below.

 This option puts \texttt{\string\mintinline} inside a \texttt{\string\colorbox}, which \textbf{does not allow line breaks}.  If you want to use \texttt{\string\setminted} to set background colors, and only want background colors on \texttt{minted} and \texttt{\string\mint}, you may use \texttt{\string\setmintedinline\{bgcolor=\{\}\}} to turn off the coloring for inline commands.

 ~

 \textbf{Framing alternatives}

 If you want more reliable and advanced options for background colors and framing, you should consider a more advanced framing package such as \pkg{mdframed} or \pkg{tcolorbox}.  It is easy to add framing to \pkg{minted} commands and environments using the \pkg{etoolbox} package, which is automatically loaded by \pkg{minted}.  For example, using \pkg{mdframed}:
\begin{Verbatim}
\BeforeBeginEnvironment{minted}{\begin{mdframed}}
\AfterEndEnvironment{minted}{\end{mdframed}}
\end{Verbatim}
 Some framing packages also provide built-in commands for such purposes.  For example, \pkg{mdframed} provides a \texttt{\string\surroundwithmdframed} command, which could be used to add a frame to all \texttt{minted} environments:
\begin{Verbatim}
\surroundwithmdframed{minted}
\end{Verbatim}
 \pkg{tcolorbox} even provides a built-in framing environment with \pkg{minted} support.  Simply use \texttt{\string\tcbuselibrary\{minted\}} in the preamble, and then put code within a \texttt{tcblisting} environment:
\begin{Verbatim}
\begin{tcblisting}{<tcb options>,
                   minted language=<language>,
                   minted style=<style>,
                   minted options={<option list>} }
<code>
\end{tcblisting}
\end{Verbatim}
 \pkg{tcolorbox} provides other commands and environments for fine-tuning listing appearance and for working with external code files.

   \item[codetagify (list of strings) (\textrm{highlight \texttt{XXX}, \texttt{TODO}, \texttt{BUG}, and \texttt{NOTE}})]
     Highlight special code tags in comments and docstrings.

 \item[curlyquotes (boolean) (false)]
 By default, the backtick \texttt{\textasciigrave} and typewriter single quotation mark \texttt{\textquotesingle} always appear literally, instead of becoming the left and right curly single quotation marks \texttt{`'}.  This option allows these characters to be replaced by the curly quotation marks when that is desirable.

   \item[encoding (string) (\meta{system-specific})]
     Sets the file encoding that \app{Pygments} expects.  See also |outencoding|.
   \item[escapeinside (string) (\meta{none})]
   Escape to \LaTeX\ between the two characters specified in \texttt{\string(string\string)}.  All code between the two characters will be interpreted as \LaTeX\ and typeset accordingly.  This allows for additional formatting.  The escape characters need not be identical.  Special \LaTeX\ characters must be escaped when they are used as the escape characters (for example, \texttt{escapeinside=\textbackslash\#\textbackslash\%}).  Requires \app{Pygments} 2.0+.

 \textbf{Escaping does not work inside strings and comments (for comments, there is \texttt{texcomments}).  As of Pygments 2.0.2, this means that escaping is ``fragile'' with some lexers.}  Due to the way that Pygments implements \texttt{escapeinside}, any ``escaped'' \LaTeX\ code that resembles a string or comment for the current lexer may break \texttt{escapeinside}.  There is a \href{https://bitbucket.org/birkenfeld/pygments-main/issue/1118}{Pygments issue} for this case.  Additional details and a limited workaround for some scenarios are available on the \href{https://github.com/gpoore/minted/issues/70#issuecomment-111729930}{\pkg{minted} GitHub site}.

 \begingroup  ^^A Need to prevent active "|" from causing problems
 \catcode`\|=11
 \begin{example}
   \begin{minted}[escapeinside=||]{py}
   def f(x):
       y = x|\colorbox{green}{**}|2
       return y
   \end{minted}
 \end{example}
 \endgroup

 \textbf{Note that when math is used inside escapes, any active characters beyond those that are normally active in verbatim can cause problems.}  Any package that relies on special active characters in math mode (for example, \pkg{icomma}) will produce errors along the lines of \texttt{TeX capacity exceeded} and \texttt{\string\leavevmode \string\kern \string\z@}.  This may be fixed by modifying \texttt{\string\@noligs}, as described at \url{http://tex.stackexchange.com/questions/223876}.
   \item[firstline (integer) (1)]
     The first line to be shown.
     All lines before that line are ignored and do not appear in the output.
   \item[firstnumber (auto \| last \| integer) (auto = 1)]
     Line number of the first line.
   \item[fontfamily (family name) (tt)]
     The font family to use.
     |tt|, |courier| and |helvetica| are pre-defined.
   \item[fontseries (series name) (auto \textrm{-- the same as the current font})]
     The font series to use.
   \item[fontsize (font size) (auto \textrm{-- the same as the current font})]
     The size of the font to use, as a size command, e.g. |\footnotesize|.
   \item[fontshape (font shape) (auto \textrm{-- the same as the current font})]
     The font shape to use.
   \item[formatcom (command) (\meta{none})]
     A format to execute before printing verbatim text.
   \item[frame (none \| leftline \| topline \| bottomline \| lines \| single) (none)]
     The type of frame to put around the source code listing.
   \item[framerule (dimension) (0.4pt)]
     Width of the frame.
   \item[framesep (dimension) (\cmd\fboxsep)]
     Distance between frame and content.
   \item[funcnamehighlighting (boolean) (true)] \appliesto{PHP}
     If |true|, highlights built-in function names.
   \item[gobble (integer) (0)]
     Remove the first $n$ characters from each input line.

 \item[highlightcolor (string) (LightCyan)]
 Set the color used for |highlightlines|, using a predefined color name from \pkg{color} or \pkg{xcolor}, or a color defined via |\definecolor|.


 \item[highlightlines (string) (\meta{none})]
 This highlights a single line or a range of lines based on line numbers.  For example, |highlightlines={1, 3-4}|.  The line numbers refer to the line numbers that would appear if |linenos=true|, etc.  They do not refer to original or actual line numbers before adjustment by |firstnumber|.

 The highlighting color can be customized with |highlightcolor|.


   \item[keywordcase] (string) (lower)
     Changes capitalization of keywords.  Takes |lower|, |upper|, or |capitalize|.
   \item[label (string) (\emph{empty})]
     Add a label to the top, the bottom or both of the frames around the code.
     See the \pkg{fancyvrb} documentation for more information and examples.
     \emph{Note:} This does \emph{not} add a |\label| to the current listing.
     To achieve that, use a floating environment (section \ref{sec:float}) instead.
   \item[labelposition (none \| topline \| bottomline \| all) (topline, all,  \textrm{or} none)]
     Position where to print the label (see above;  default: |topline| if one label is defined, |all| if two are defined, |none| else).
     See the \pkg{fancyvrb} documentation for more information.
   \item[lastline (integer) (\meta{last line of input})]
     The last line to be shown.
   \item[linenos (boolean) (false)]
     Enables line numbers.
     In order to customize the display style of line numbers, you need to redefine the |\theFancyVerbLine| macro:

 \begin{example}
   \renewcommand{\theFancyVerbLine}{\sffamily
     \textcolor[rgb]{0.5,0.5,1.0}{\scriptsize
     \oldstylenums{\arabic{FancyVerbLine}}}}

   \begin{minted}[linenos,
     firstnumber=11]{python}
   def all(iterable):
       for i in iterable:
           if not i: 
               return False
       return True
   \end{minted}
 \end{example}

 \item[numberfirstline (boolean) (false)]
 Always number the first line, regardless of |stepnumber|.


   \item[numbers (left \| right \| both \| none) (none)]
     Essentially the same as |linenos|, except the side on which the numbers appear may be specified.
   \item[mathescape (boolean) (false)]
     Enable \LaTeX{} math mode inside comments.
     Usage as in package \pkg{listings}.
     See the note under \texttt{escapeinside} regarding math and ligatures.
   \item[numberblanklines (boolean) (true)]
     Enables or disables numbering of blank lines.
   \item[numbersep (dimension) (12pt)]
     Gap between numbers and start of line.
   \item[obeytabs (boolean) (false)]
     Treat tabs as tabs instead of converting them to spaces---that is, expand them to tab stops determined by |tabsize|.  \textcolor{DarkRed}{\textbf{While this will correctly expand tabs within leading indentation, usually it will not correctly expand tabs that are preceded by anything other than spaces or other tabs.  It should be avoided in those case.}}

   \item[outencoding (string) (\meta{system-specific})]
     Sets the file encoding that \app{Pygments} uses for highlighted output.  Overrides any encoding previously set via |encoding|.
   \item[python3 (boolean) (false)] \appliesto{PythonConsoleLexer}
     Specifies whether Python 3 highlighting is applied.
   \item[resetmargins (boolean) (false)]
     Resets the left margin inside other environments.
   \item[rulecolor (color command) (black)]
     The color of the frame.
   \item[samepage (boolean) (false)]
     Forces the whole listing to appear on the same page, even if it doesn't fit.
   \item[showspaces (boolean) (false)]
     Enables visible spaces: \verb*/visible spaces/.
   \item[showtabs (boolean) (false)]
     Enables visible tabs---only works in combination with |obeytabs|.


 \item[space (macro) (\string\textvisiblespace, \textvisiblespace)]
 Redefine the visible space character.  Note that this is only used if |showspaces=true|.


 \item[spacecolor (string) (none)]
 Set the color of visible spaces.  By default (|none|), they take the color of their surroundings.


   \item[startinline (boolean) (false)] \appliesto{PHP}
     Specifies that the code starts in PHP mode, i.e., leading |<?php| is omitted.
   \item[style] (string) (\meta{default})
     Sets the stylesheet used by \app{Pygments}.
   \item[stepnumber (integer) (1)]
     Interval at which line numbers appear.


 \item[stepnumberfromfirst (boolean) (false)]
 By default, when line numbering is used with |stepnumber| $\ne 1$, only line numbers that are a multiple of |stepnumber| are included.  This offsets the line numbering from the first line, so that the first line, and all lines separated from it by a multiple of |stepnumber|, are numbered.


 \item[stepnumberoffsetvalues (boolean) (false)]
 By default, when line numbering is used with |stepnumber| $\ne 1$, only line numbers that are a multiple of |stepnumber| are included.  Using |firstnumber| to offset the numbering will change which lines are numbered and which line gets which number, but will not change which \emph{numbers} appear.  This option causes |firstnumber| to be ignored in determining which line numbers are a multiple of |stepnumber|.  |firstnumber| is still used in calculating the actual numbers that appear.  As a result, the line numbers that appear will be a multiple of |stepnumber|, plus |firstnumber| minus 1.


   \item[stripall (boolean) (false)]
     Strip all leading and trailing whitespace from the input.
   \item[stripnl (boolean) (false)]
     Strip leading and trailing newlines from the input.


 \item[tab (macro) ({\rmfamily\pkg{fancyvrb}'s} \string\FancyVerbTab, \FancyVerbTab)]
 Redefine the visible tab character.  Note that this is only used if |showtabs=true|.  |\rightarrowfill|, \hbox to 2em{\rightarrowfill}, may be a nice alternative.


 \item[tabcolor (string) (black)]
 Set the color of visible tabs.  If |tabcolor=none|, tabs take the color of their surroundings.  This is typically undesirable for tabs that indent multiline comments or strings.


   \item[tabsize (integer) (8)]
     The number of spaces a tab is equivalent to.  If |obeytabs| is \emph{not} active, tabs will be converted into this number of spaces.  If |obeytabs| is active, tab stops will be set this number of space characters apart.
   \item[texcl (boolean) (false)]
     Enables \LaTeX{} code inside comments.
     Usage as in package \pkg{listings}.  See the note under \texttt{escapeinside} regarding math and ligatures.
   \item[texcomments (boolean) (false)]
     Enables \LaTeX{} code inside comments.  The newer name for |texcl|.  See the note under |escapeinside| regarding math and ligatures.

     As of Pygments 2.0.2, \texttt{texcomments} fails with multiline C/C++ preprocessor directives, and may fail in some other circumstances.  This is because preprocessor directives are \href{http://pygments.org/docs/tokens/}{tokenized as \texttt{Comment.Preproc}}, so \texttt{texcomments} causes preprocessor directives to be treated as literal \LaTeX\ code.  \href{https://bitbucket.org/birkenfeld/pygments-main/issue/1086/wrong-processing-of-in-c-c-macros-if-is}{An issue has been opened} at the Pygments site; additional details are also available on the \href{https://github.com/gpoore/minted/issues/66}{\pkg{minted} GitHub site}.
   \item[xleftmargin (dimension) (0)]
     Indentation to add before the listing.
   \item[xrightmargin (dimension) (0)]
     Indentation to add after the listing.

 \end{optionlist}
